apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/part-of: {{ .Values.group }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: "{{ .Release.Name }}-{{ .Release.Revision }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/part-of: {{ .Values.group }}
  template:
    metadata:
      annotations:
        {{- if .Values.secrets }}
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "{{ .Values.serviceAccount.name }}"
        {{- range $secret := .Values.secrets }}
        {{ $nameParts := split "/" $secret.secret }}
        {{ $name := index $nameParts "_1" }}
        {{- if $secret.path }}
        {{ $pathParts := split "/" $secret.path }}
        {{ $name := index $pathParts (printf "_%s" (sub (len $pathParts) 1 | toString)) }}
        vault.hashicorp.com/secret-volume-path-{{ $name }}: "{{ trimSuffix $name $secret.path }}"
        {{- end }}
        vault.hashicorp.com/agent-inject-secret-{{ $name }}: "{{ $secret.secret }}"
        vault.hashicorp.com/agent-inject-template-{{ $name }}: |
          {{ printf "{{ with secret %q }} {{ toJSON .Data.data }} {{ end }}" $secret.secret }}
        # vault.hashicorp.com/agent-inject-command-{{ $name }}: "cat /vault/secrets/{{ $name }}"
        {{- end }}
        {{- end }}
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/part-of: {{ .Values.group }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.args }}
          args:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command:
            - "cat /vault/secrets/helloworld"
          # args:
          #   - "/bin/sh"
          #   - "-ec"
          #   - "/hello"
          #   - "--greeting=$(cat /vault/secrets/helloworld)"
          ports:
            - name: container-port
              containerPort: {{ .Values.service.containerPort }}
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: container-port
          readinessProbe:
            tcpSocket:
              port: container-port
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
