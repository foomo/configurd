// Code generated for package exampledata by go-bindata DO NOT EDIT. (@generated)
// sources:
// example/application/Dockerfile
// example/application/hello.go
// example/squadron/.gitignore
// example/squadron/charts/example/.helmignore
// example/squadron/charts/example/Chart.yaml
// example/squadron/charts/example/templates/_helpers.tpl
// example/squadron/charts/example/templates/deployment.yaml
// example/squadron/charts/example/templates/ingress.yaml
// example/squadron/charts/example/templates/service.yaml
// example/squadron/charts/example/templates/tests/test-connection.yaml
// example/squadron/charts/example/values.yaml
// example/squadron/namespaces/local/hello-group.yml
// example/squadron/services/example.yml
// example/squadron/services/hello-service.yml
// example/squadron/services/hi-service.yml
package exampledata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _applicationDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x4a\xcc\x29\xc8\xcc\x4b\x55\x70\x0c\x56\x48\x2a\xcd\xcc\x49\x49\x2d\xe2\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\xe2\x0a\x0a\xf5\x53\x48\xcf\x87\xc8\x28\xe8\xe6\x2b\xe8\x67\xa4\xe6\xe4\xe4\x83\x64\xc0\x46\x40\xf4\x5a\xe5\x24\x96\xa4\x16\x97\x40\xf5\xe9\xea\xa6\x15\xe5\xe7\xda\x42\x0d\x83\xe9\x80\x50\x5c\x5c\xae\x7e\x21\x41\x91\x01\xfe\x9e\x7e\x21\x0a\xd1\x4a\x10\x41\xa5\x58\x40\x00\x00\x00\xff\xff\x8e\x35\x03\xdb\x8f\x00\x00\x00")

func applicationDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_applicationDockerfile,
		"application/Dockerfile",
	)
}

func applicationDockerfile() (*asset, error) {
	bytes, err := applicationDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application/Dockerfile", size: 143, mode: os.FileMode(420), modTime: time.Unix(1590781685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _applicationHelloGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xb1\x4e\x03\x31\x0c\x9d\xe3\xaf\xb0\x32\x25\xd5\xe9\x60\x44\x95\x3a\x74\xa0\x74\xa8\x04\xa2\x03\x03\x42\x55\xe8\xb9\x69\x44\x9a\x3b\x12\x97\x0a\xa1\xfe\x3b\x4a\x2e\x45\x95\x98\x6c\x3f\x3f\x3f\xdb\x6f\x30\xdb\x0f\x63\x09\x0f\xc6\x05\x00\x77\x18\xfa\xc8\xa8\x40\xc8\x9d\x37\x56\x82\x90\xbe\x2f\x21\x10\xdf\xec\x99\x07\x09\x1a\x60\x77\x0c\xdb\x32\xa1\x34\xfe\x80\xc8\xd4\x79\xd7\x45\x4a\x09\xa7\x33\xcc\x65\xbb\xe6\xe8\x82\x55\xd2\x8c\xb8\x6c\x50\x4e\xef\x6e\x73\xa8\x08\x72\x8f\xde\x25\xa6\x90\x33\xa9\x47\x99\x87\x48\xc4\x2e\xd8\x7f\x3a\xb6\x36\xb2\xc2\xf2\x7e\xb5\x7a\xcc\x49\x22\x4e\xc8\x7b\xc2\x4b\x17\x0f\x94\x92\xb1\x74\x91\x6b\x9f\x4c\x4c\xa4\x34\x80\xb0\x57\xca\xaf\x6f\xef\xdf\x4c\x6a\x72\xbd\x31\x73\xf6\x26\x74\x9e\x62\xa6\xe4\x5f\xdb\xe5\x58\x2f\x8e\x61\xab\xf2\xcf\xea\x34\xe2\xcf\x94\x86\x3e\x24\x7a\x89\x8e\x29\x36\x18\x71\x52\xf1\xcf\x23\x25\x2e\xa6\x88\x4d\x83\x1b\x9c\xe1\xa9\x2d\x2c\x65\xff\xf6\x88\x73\xde\xe5\x7b\xdb\x2e\x0c\x1b\xaf\xca\xe8\xaa\x58\x31\x0f\xdd\x9a\xe2\x57\x3d\xad\x7a\xda\x60\xbd\x4b\x6b\x38\xc3\x6f\x00\x00\x00\xff\xff\xff\x16\x4b\x76\xb1\x01\x00\x00")

func applicationHelloGoBytes() ([]byte, error) {
	return bindataRead(
		_applicationHelloGo,
		"application/hello.go",
	)
}

func applicationHelloGo() (*asset, error) {
	bytes, err := applicationHelloGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application/hello.go", size: 433, mode: os.FileMode(420), modTime: time.Unix(1590781685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x2b\xcf\x2f\xca\x4e\xc9\x2c\x02\x04\x00\x00\xff\xff\x88\x9c\x6c\x73\x08\x00\x00\x00")

func squadronGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_squadronGitignore,
		"squadron/.gitignore",
	)
}

func squadronGitignore() (*asset, error) {
	bytes, err := squadronGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/.gitignore", size: 8, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleHelmignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x23\x31\x0c\x86\xef\x7a\x8a\x7f\x99\xcb\xee\xb0\x78\x1e\x22\xd9\xc3\x9e\x5a\x48\xc9\xb5\x78\x66\x14\x5b\x89\xc7\x36\x96\x26\x69\x7b\xe8\xb3\x97\x24\x84\xf6\xf2\x81\x3e\x24\xf1\x75\x78\xf6\x66\xdc\xb2\xc2\x0a\x24\xe4\xd2\x18\x97\xc8\x19\xe3\x2a\x69\x96\x1c\x50\xfd\x74\xf2\x81\xd5\x51\x87\x97\x28\x0a\x5d\x6b\x2d\xcd\x14\x1a\x39\x25\x84\x54\x46\x2c\xde\xa6\x28\x39\xfc\x45\xe3\xe4\x4d\xce\x8c\xea\x2d\xfe\xf0\x3e\xcf\xd4\x21\x73\xf0\x26\x25\xe3\x77\x6d\x7c\x90\x37\x9e\x71\x11\x8b\xf8\xf5\xc7\xe1\x29\xa7\x77\x94\x7c\xbb\xbc\x26\xa1\x72\x43\x92\xcc\x8e\xdc\x76\xf7\xba\xb3\xd2\x98\x3a\x6c\xca\xb2\x94\x8c\xfd\x66\x87\x59\x9a\x92\x0b\x62\xc3\x8d\xf7\x7c\x72\xe3\x47\x1b\x6e\x7c\x88\x18\x86\x2b\x1e\xa3\x9e\xf3\xf0\xfd\x68\xf4\xd3\x69\xad\x38\x48\x62\xa5\xde\xe9\xa5\x52\xef\x46\x7f\xa2\xde\xd9\x52\xa9\xff\xa4\x0e\x7b\xdf\xa4\xac\x8a\xff\xdb\x7f\x4a\xae\xb6\x72\xe4\xc9\xc8\xc9\xcc\x7e\xb8\xef\xb5\x72\x24\x77\xd6\xa9\xcc\x3c\xd0\x57\x00\x00\x00\xff\xff\xf5\x89\xaa\x2d\x56\x01\x00\x00")

func squadronChartsExampleHelmignoreBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleHelmignore,
		"squadron/charts/example/.helmignore",
	)
}

func squadronChartsExampleHelmignore() (*asset, error) {
	bytes, err := squadronChartsExampleHelmignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/.helmignore", size: 342, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleChartYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\x4a\x2c\x28\x80\x73\x95\x0c\xf5\x0c\x94\xb8\x52\x52\x8b\x93\x8b\x32\x0b\x4a\xc0\x42\x8e\x79\x0a\xae\x15\x89\xb9\x05\x39\xa9\x0a\xce\x19\x89\x45\x25\x0a\x69\xf9\x45\x0a\xc1\x85\xa5\x89\x29\x45\xf9\x79\x5c\x79\x89\xb9\xa9\x56\x0a\xa9\x10\x05\x5c\x65\x30\x73\x0c\xf4\x8c\xf4\x0c\xb8\x00\x01\x00\x00\xff\xff\x08\xda\xe9\xbd\x69\x00\x00\x00")

func squadronChartsExampleChartYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleChartYaml,
		"squadron/charts/example/Chart.yaml",
	)
}

func squadronChartsExampleChartYaml() (*asset, error) {
	bytes, err := squadronChartsExampleChartYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/Chart.yaml", size: 105, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplates_helpersTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x0f\xd1\x40\x9b\xb2\xce\xa1\xd0\xc3\x42\x4e\x69\x0f\xa5\x90\x42\x03\xe9\xb1\xc8\xf6\xa8\x3b\x20\xcb\xae\x46\xda\xee\x92\xe4\xbf\x17\x49\x8e\x77\xb7\xe0\xb2\x7b\x1b\xac\xa7\x37\x6f\xbe\x91\x9f\x9e\x6e\xae\xb1\xe5\x7e\x0d\xa1\x00\xc3\x96\xc2\x7e\xa4\xdb\x3e\x4a\xd0\xed\x86\xd6\xb8\xbe\x79\x79\xa9\x92\xaa\xfa\xbc\x1b\xb5\xeb\x10\x36\x04\xa7\x7b\xc2\x60\x72\xdd\x6e\xb4\x0f\x75\x35\xe9\x56\xe8\xc8\xb0\x23\x28\xda\xe9\x7e\xb4\x54\x27\xad\xc2\xea\x70\xaa\xa3\x0d\xa8\xef\xf2\xb5\xfb\x64\x54\x3f\x6a\x1b\x49\xb2\xf2\xdb\x96\xbc\xe7\x8e\xf0\x8c\xe0\xa3\x6b\xf1\xf1\x43\x2e\xb9\x7f\x88\xc6\xf0\x0e\x6a\x75\x30\x23\xd7\xe5\xba\xe4\xbb\xf3\xa4\x03\x41\xcf\x3d\x4c\xb4\x76\x8f\xdf\x51\x5b\x36\x4c\x1d\xf4\x38\xe6\xe4\x75\xf5\x83\x8a\x7b\xd6\x87\xd4\x23\x4d\x21\x68\xa8\xd5\x51\x08\x32\xf4\x84\xaf\xb1\x21\xef\x28\x90\x94\x79\x0d\x93\xed\x04\xda\x13\x2c\xf7\x1c\xa8\x43\x18\x10\x36\x2c\x78\xdb\xec\x33\x8b\x4f\xf7\x0f\x49\xcb\xee\x17\x64\xa4\xf6\x5d\x5d\x7d\x31\xf0\x64\x49\xcb\x04\xad\x1d\x5c\xd0\xec\xa4\x60\x2b\xdf\x38\xe0\x0f\x5b\x8b\x86\x10\x25\xe5\x14\xe8\x1c\x7e\x4a\xbb\x88\x36\x69\x4e\xf1\xb2\x99\x69\xbe\x1e\xce\x44\x5f\x35\x8b\x82\xb3\x90\x5b\x39\x38\xbd\xc9\xf1\xd7\xb7\xe7\x6f\xf5\x28\xe7\x4c\xa2\xb8\xd4\xdf\x0b\xa6\x72\x79\xce\x7a\xf2\xf5\xe2\x80\xa3\x67\x17\x0c\xd4\x95\xac\xae\x44\xfd\xe3\x56\xfa\x5e\xf2\xce\x96\xea\x93\xf7\x77\xb4\xd8\xf4\xbb\x6c\xc9\x0b\x0f\x2e\x2d\x35\x2f\x77\x7a\x29\x45\x65\x75\x43\xf6\x3f\x0b\xce\x2a\xb5\x38\xce\x31\xed\x52\x3f\x4e\xdd\x9e\xe1\x69\xb4\xba\x25\xa8\xf7\x0a\xea\xa7\xba\x68\xce\xbf\x01\x00\x00\xff\xff\xef\x62\xa1\x95\x15\x04\x00\x00")

func squadronChartsExampleTemplates_helpersTplBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplates_helpersTpl,
		"squadron/charts/example/templates/_helpers.tpl",
	)
}

func squadronChartsExampleTemplates_helpersTpl() (*asset, error) {
	bytes, err := squadronChartsExampleTemplates_helpersTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/_helpers.tpl", size: 1045, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x41\x6f\xdb\x3c\x0c\xbd\xe7\x57\x08\xbd\xdb\x45\xbf\xd3\x07\x5f\xbb\xe3\x36\x18\xcd\x50\x60\x47\x46\x66\x62\x21\x92\x28\x48\xb4\x87\x20\xcb\x7f\x1f\x14\x3b\x8e\x14\xb7\x49\x1b\xd4\x37\x53\x8f\x7c\x4f\x8f\x22\xc1\xa9\x57\xf4\x41\x91\xad\x04\x38\x17\x1e\xfb\xa7\xc5\x56\xd9\xa6\x12\xdf\xd0\x69\xda\x19\xb4\xbc\x30\xc8\xd0\x00\x43\xb5\x10\xc2\x82\xc1\x4a\x3c\xec\xf7\xa2\x7c\x6e\xc1\x73\xf9\x13\x0c\x8a\xc3\xe1\x61\x21\x84\x86\x15\xea\x10\x51\x22\x16\x2b\xb7\xdd\x0a\xbd\x45\xc6\x50\x2a\x7a\x1c\x32\x67\x89\xef\xa0\x1d\x78\x2e\x68\x3d\x24\xbc\xa0\x46\x08\x78\x23\xc5\x80\x85\x0d\x36\xc5\x6a\x97\x67\x2d\xd1\xf7\x4a\x4e\x89\x2d\x6a\x53\x86\xf6\x51\x46\x15\xe3\x55\x2e\x08\x8a\x34\xf6\x82\xbd\x8a\x06\x1d\x2f\x19\x1c\xca\x78\x41\x8f\x4e\x2b\x09\x61\x60\x7a\x05\xdd\x61\x28\xc7\xe0\x33\x75\x96\x07\xb6\x80\x1a\x25\x93\x1f\x3c\x31\xc0\xb2\xfd\x9e\x98\xf4\x59\x9b\xee\x30\x8a\xd1\x38\x0d\x8c\xa3\x82\xa4\x93\xf1\xd3\x99\x98\xcf\xcb\xb9\xab\x73\x27\x0f\xe3\x27\xc9\x32\x28\x8b\x3e\x11\x51\x88\x5b\xa4\x42\x28\x03\x9b\xd3\x3b\x1c\xdd\x3f\x86\x62\x0f\x28\x28\x26\xbf\x13\x87\x43\x35\x3b\x66\xd8\x8c\x8f\x35\xab\x54\x77\x5a\xd7\xa4\x95\xdc\x65\x0d\x1d\x72\xdc\x74\x98\x6b\xd8\xef\x0b\xf1\x47\x71\x3b\xc1\xc1\x6f\x42\x0e\x89\x91\x2a\xf9\x1f\x92\x98\x7e\x83\xd1\xa2\x14\x7f\x85\x55\xb6\x41\xcb\xe2\xe9\xbf\x79\x6d\xb4\xcd\x0d\x42\xb4\x7d\x8e\x40\xdb\x7f\x1d\x9d\x23\xcf\x17\xea\x4f\xad\x99\xda\x56\x44\x50\x06\x49\x7a\x5a\x53\x1c\xb0\xc4\xcf\x30\x4c\x62\x99\x21\x72\xd2\x23\xb1\x27\x26\x49\xba\x12\xbf\x9e\xeb\xe4\x4c\xab\x1e\x2d\x86\x50\x7b\x5a\x61\x2e\x8c\xa5\x5b\x92\xdc\x22\x57\x97\xb5\x8e\x1a\xde\xd5\xeb\x11\x1a\xf5\xe5\x35\x03\x75\x5e\xe2\x95\xce\x4f\x0b\x63\x44\x5e\x69\x4d\x4f\xba\x33\xf8\x23\xee\x94\x37\x0a\x7a\xb0\x1b\x9c\xea\x0d\xd8\x70\xe9\x68\x3a\x50\x76\x36\x4a\xf1\x33\xb1\x7c\x0d\xdc\x0e\x20\x73\xde\x60\x39\x5d\xf6\x46\x46\xb6\xb3\xa8\x0f\x09\xba\x2e\xa6\xa5\x30\xe8\xc8\xa8\xdd\xa4\x2c\x9e\xa7\x19\x33\x51\xb3\x19\xb1\xd4\xe0\x72\x5c\xc3\x67\x58\x1a\xcd\x2f\xf0\xc6\xb4\xfc\x9f\x97\x4f\xf8\xe6\x2b\x60\xbd\x56\x56\x71\xb2\x29\x4e\x91\x8f\xb3\xdc\xe2\x60\xd2\xe8\x81\x15\xd9\xc4\xd8\x24\x78\x17\xd3\xbf\x00\x00\x00\xff\xff\x58\xf0\x88\xff\x09\x08\x00\x00")

func squadronChartsExampleTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplatesDeploymentYaml,
		"squadron/charts/example/templates/deployment.yaml",
	)
}

func squadronChartsExampleTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := squadronChartsExampleTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/deployment.yaml", size: 2057, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplatesIngressYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\xce\x9b\x30\x10\xbc\xf3\x14\xab\x4f\xbd\xe2\xe8\x93\x7a\xb2\xd4\x53\x4f\xbd\x54\x55\x2a\x45\xea\x71\x81\x4d\xb0\x02\x6b\x64\x6f\xd2\x56\x94\x77\xaf\x16\x43\x80\xfc\x54\xe5\xe4\x5d\x66\xec\x99\xb1\xb7\xef\x73\x70\x47\x30\x07\x6c\x2e\x14\x8d\xe3\x53\xa0\x18\x4d\xed\xa3\x44\x18\x86\xac\xef\xe1\x43\xa4\x70\x75\x25\x7d\xc5\x96\xc0\x7e\x02\xb3\xa7\x86\x30\x92\x19\x1b\x5b\xcc\x37\x1f\x64\xc4\x4c\xfb\x4d\x6d\x53\x7a\x16\x74\x4c\x61\x04\x0c\x43\x86\x9d\x3b\x50\x88\xce\xb3\x05\xfa\x25\xc4\xba\x8c\xbb\xeb\x7b\x41\x82\xef\xd9\xd9\x71\x65\xe1\x4b\x52\x93\xb5\x24\x58\xa1\xa0\xcd\x00\x18\x5b\xb2\xf0\xd6\xf7\x60\x3e\xd7\x18\x64\x56\xf1\x96\x01\x34\x58\x50\x13\x15\x05\x80\x5d\x67\xce\x97\x82\x02\x93\xa8\x31\xbf\x4b\xcc\x07\xe2\x0b\x74\x87\x41\x72\x7f\x4c\x84\x7b\xc7\xcf\x29\x2d\x32\x9e\xa8\xca\x8b\xdf\x5b\xd6\xf7\x14\xc2\x4c\xac\xa9\x69\x4d\xac\x77\xa5\xaa\x98\xac\xdc\x1d\x90\xaf\x7b\x7b\xba\x3a\x4d\x67\x32\xa9\x37\xf6\xd3\x49\xfd\x70\x67\xc8\xec\x05\x45\x73\x4c\x47\xad\x1a\x29\x13\xa5\x8a\xff\x81\x6d\x03\x06\xfe\x00\x3b\xae\x88\x05\x3e\x26\xb8\xfe\x25\xae\xb4\x88\x1d\x95\x36\x7b\xf1\x36\x22\x95\x81\x64\x89\x42\xe6\xc8\x73\x18\x9f\x4d\x2a\x74\x3f\x08\xc8\x27\x7a\xfd\xb8\x12\x2e\x1f\xc3\xe2\x55\xb4\x23\x77\x92\x92\xea\xe5\xcc\x14\xed\x3f\x25\xad\x8c\x00\x84\x4b\x43\x37\xfb\xff\x23\x28\xb9\xb0\x4f\x44\xd5\x22\xdd\x6c\x0e\xa0\x43\xa9\xe3\x52\x2a\x51\x5b\x89\xa8\xab\x85\x98\xbe\x02\xcb\x33\x71\x65\x37\x4d\xb5\x76\x9b\xae\x91\xbb\x19\xb7\xbb\x2d\x6e\x68\x1d\xa3\x0d\x7a\x9e\xab\x6d\x78\xab\x24\xfe\x06\x00\x00\xff\xff\xfb\x6f\xcf\xb8\xe9\x03\x00\x00")

func squadronChartsExampleTemplatesIngressYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplatesIngressYaml,
		"squadron/charts/example/templates/ingress.yaml",
	)
}

func squadronChartsExampleTemplatesIngressYaml() (*asset, error) {
	bytes, err := squadronChartsExampleTemplatesIngressYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/ingress.yaml", size: 1001, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x31\x6b\xc3\x30\x10\x85\x77\xfd\x8a\x23\xbb\x15\xba\x6a\xcd\x5e\x42\x5a\xb2\x9f\xe5\xd7\x5a\x44\x96\xc4\xe9\x62\x08\xc1\xff\xbd\xb8\x76\xa0\x05\x97\x92\x51\xba\xf7\x71\xf7\x3d\x2e\xe1\x0c\xa9\x21\x27\x47\xe3\x8b\xb9\x84\xd4\x39\x7a\x83\x8c\xc1\xc3\x0c\x50\xee\x58\xd9\x19\xa2\xc4\x03\x1c\xdd\xef\x64\x0f\x3d\x8b\xda\x57\x1e\x40\xd3\x64\x88\x22\xb7\x88\x75\xce\x10\x71\x29\xf6\x72\x6d\x21\x09\x8a\x6a\x43\xde\xff\xcd\x6d\xa5\x0b\x8b\x36\xf9\x63\x01\x4e\x88\xe0\x8a\x7f\x90\x81\x13\x7f\xa2\x6b\xda\xdb\x6f\x6a\x95\x78\x80\x3d\xe2\x60\x6b\xbf\xf7\xf3\x15\x8e\x76\x1b\x0b\x9a\x9f\x7f\x27\x8c\x61\xae\x85\xa6\x69\x67\x6a\x81\x9f\x05\x2b\x22\xbc\x66\x79\x5e\x56\x6f\x65\x9d\x9c\x39\x5e\x51\x6d\x5d\xce\xb3\xf3\x60\x89\x94\x2c\xba\xd6\xd8\x7c\x3f\x36\xf3\x3e\x27\xe5\x90\x20\xc7\x2c\xfa\x90\x23\x2a\x92\x35\xfb\x1c\x1d\xbd\x1f\x8e\xe6\x2b\x00\x00\xff\xff\xb5\x1a\x45\x28\xd6\x01\x00\x00")

func squadronChartsExampleTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplatesServiceYaml,
		"squadron/charts/example/templates/service.yaml",
	)
}

func squadronChartsExampleTemplatesServiceYaml() (*asset, error) {
	bytes, err := squadronChartsExampleTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/service.yaml", size: 470, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplatesTestsTestConnectionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x31\x6f\xe3\x30\x0c\x85\x77\xff\x0a\xc2\x4b\x26\x2b\xb8\x55\xeb\xed\x41\x70\x07\x64\x09\x3a\xd0\x32\x6b\x0b\x91\x28\x43\xa4\xd3\x04\x81\xff\x7b\x21\xdb\x45\x0b\x34\x45\xd7\xa7\xf7\x3d\xea\x91\x38\xfa\x13\x65\xf1\x89\x2d\x5c\xff\x54\x17\xcf\x9d\x85\x63\xea\xaa\x48\x8a\x1d\x2a\xda\x0a\x80\x31\x92\x85\xfa\xf1\x00\xcf\x2e\x4c\x1d\x41\x4d\x37\x8c\x63\x20\xf3\x3a\x85\x50\x9e\x6b\x30\x30\xcf\x8d\x92\x68\xe3\x12\x33\x39\xf5\x89\xeb\x0a\x20\x60\x4b\x41\x4a\x0c\x00\x8e\xa3\xb9\x4c\x2d\x65\x26\x25\x31\x3e\xed\xd7\xe8\x67\xc9\x9f\xa9\x0b\x3a\x50\x88\x46\x86\xbd\x1b\x30\xeb\x73\x62\x79\xfa\x82\x7c\x9f\xe6\x59\x14\xd9\xad\x13\xcd\xdf\xe2\x37\x07\x8c\xf4\x33\x11\x91\xb1\xa7\xae\x69\xef\x2b\xf3\x8f\x02\xa1\x90\xf9\x4f\xf9\xea\xdd\x06\x22\x73\x52\x2c\x85\xb7\x9e\xf5\xc7\x6f\x87\x94\x2e\xb5\x85\x65\x2d\x32\x39\x47\x22\x95\x8c\xe4\x8a\xcd\x25\x56\xf4\x4c\x79\x83\x9a\x6d\xcf\x6f\x3d\xe9\x22\x00\xf8\x88\x3d\x59\x68\x27\xb9\xb7\xe9\xb6\x89\x2e\xc5\x88\xe5\x4c\xe7\x5d\xb1\xee\x5e\x36\x1d\x73\x2f\x16\xe0\xbc\xfb\xfd\x4e\xb6\x54\x39\x61\x98\x48\x8c\xac\x4d\xcc\x98\xb2\xc2\x3c\x2f\x71\x99\x44\x31\xeb\x31\x05\xef\xee\x16\x0e\x74\xa5\x5c\xbd\x07\x00\x00\xff\xff\xc8\x16\x9f\x0f\x2b\x02\x00\x00")

func squadronChartsExampleTemplatesTestsTestConnectionYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplatesTestsTestConnectionYaml,
		"squadron/charts/example/templates/tests/test-connection.yaml",
	)
}

func squadronChartsExampleTemplatesTestsTestConnectionYaml() (*asset, error) {
	bytes, err := squadronChartsExampleTemplatesTestsTestConnectionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/tests/test-connection.yaml", size: 555, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdc\x46\x0c\xbd\xcf\xaf\x20\xd6\x87\x5c\xec\xad\x9d\x5e\x02\x01\x39\x18\x4e\x5b\x18\xb0\x9d\x45\xd7\x45\x51\x04\x39\x70\x47\x94\x34\xed\x68\xa8\x92\x9c\x75\x84\xa2\xff\xbd\x98\x91\xfc\xd1\x38\x87\x9c\x76\x76\xf4\xc8\x79\x7c\x7c\xe4\x09\x7c\xa0\x0e\x73\x34\x38\x62\xcc\xa4\xd0\xb1\x80\x91\xda\xd6\x9d\xc0\xfd\x10\x14\x82\x02\xc2\x1f\x97\xb7\x37\x67\x1d\xcb\x88\x66\xd4\x42\x17\x22\x15\xc0\x07\xf2\x11\x85\xe0\x88\x12\xf0\x10\x49\xc1\x18\x0e\x04\x13\xaa\x52\x0b\x21\x19\xc3\xcc\xb9\x64\x1c\xa7\x88\x46\xba\x75\x4e\x68\x8a\xc1\xe3\x15\xe7\x64\x0d\x5c\x38\x17\x46\xec\xa9\x71\x00\x42\x13\x6b\x30\x96\xb9\x81\xd4\x87\xf4\xc5\x01\x18\xf6\x0d\xd4\x50\x73\x00\x53\x8e\x71\xc7\x31\xf8\xb9\x81\xeb\xee\x8e\x6d\x27\xa4\x94\x6c\x4d\xb2\xcb\x31\xee\xc9\x0b\x99\x36\xf0\xe9\xb3\x4b\x38\xd2\xc7\x23\x89\x84\x96\x1a\xd8\x6c\x5c\x97\x63\x7c\x75\xe9\x94\xe4\x18\x3c\x5d\x7a\x5f\x39\x39\x80\x13\xd8\x4f\xe4\x43\x17\x48\xe1\x61\x20\x1b\x48\x00\x61\xc5\x01\x2e\x40\xd0\x81\x73\x6c\x4b\xc1\x5e\x08\x8d\x5a\x07\xeb\xa9\x01\x93\x4c\x35\xd1\x65\x4a\x6c\x68\x81\x53\x55\x07\xdb\xb6\xfc\xd8\x40\x5f\xa7\x73\x00\xf8\x8c\x6d\xe0\x9f\x7f\x6b\xfc\xfd\x40\x50\x28\x03\x77\xdf\x8a\x2a\xc9\xb2\xd2\xb6\x62\xaf\x3b\x48\x6c\xa0\x64\x80\xa9\x5d\xb9\x94\x0e\x16\x36\xa7\x80\x4b\xa2\xa0\xd0\x53\x22\x29\x8c\x21\x6b\x48\x7d\x4d\xfc\xa8\xcd\x53\xb3\x1c\x54\x7c\xe3\xdc\xc4\xed\x9e\x7c\x96\x60\xf3\x15\x27\xa3\x2f\xf6\x44\xaf\xd3\x5f\x84\xf3\xd4\xc0\xdb\xf3\xf3\xf3\x22\xe5\xb7\x61\x1e\x27\x3c\x84\x18\x2c\x90\x2e\x02\x03\xb4\xc2\xd3\xe3\xf9\x0c\x2e\x6f\x6e\xea\x59\x08\xdb\x8f\x29\xce\xbf\x32\xdb\xcf\x21\x92\xce\x6a\x34\xbe\x10\x54\x72\xba\xd4\x3b\x4e\x05\xf0\xf5\xf5\x6f\x4a\xd2\xc0\xc5\x4a\xa5\x0a\x55\x5e\xb0\x79\xa2\x06\xae\x62\x56\x23\xb9\xde\x15\x23\xb1\x58\x03\xef\xce\x4b\xc7\x38\x19\x86\x44\xb2\xab\x77\x3f\xd6\xe0\x7e\x29\xaa\xda\xce\x51\x3a\x56\x3b\x95\x67\xce\x16\x4d\xe0\xfe\xa7\xfd\xfd\xca\xbd\x4e\x4e\x03\x9b\x02\xde\x38\x87\xd2\xeb\x0b\xf8\x06\xa5\xbf\x78\xff\x9e\x13\x6d\x9c\x73\x21\xf5\x42\x5a\x25\x78\xdd\xec\x12\xf0\x57\x3e\x90\x24\x2a\xa3\x12\xf8\x87\x15\xbe\xf5\x11\x55\x9f\x87\xe2\x35\xd0\xa2\x9e\xa1\x1f\x2b\x0d\xc9\xb4\x71\x00\x03\xab\x55\x7f\x03\x4c\x68\xc3\x7a\xd4\x3a\x1e\x77\xb5\x86\xe2\x7d\x21\xe5\x2c\x9e\x9e\x0d\xf7\x3b\x41\xd6\x8c\x31\xce\x20\xe4\x79\x1c\x29\xb5\xd5\x56\xc6\xa0\x75\x2a\x66\x68\xd7\xa5\xf1\x14\x5d\xfd\x66\x0c\x91\xf0\x48\x60\x65\x71\x60\x59\x1c\x9e\x93\xfa\xc0\x59\x17\x17\x0c\x5c\xac\x5b\x77\xcc\x50\x9e\x21\xd9\x2e\x5b\x06\xa3\x32\x84\x54\x1c\xab\xa4\xe0\x07\x4c\x7e\xf9\x15\xd3\xd2\x5b\xe0\x04\x94\x8e\x41\x38\x8d\x94\x4c\xe1\x21\xd8\x00\x31\x98\xc5\xb5\xff\x8f\x54\x4e\x41\xb3\x1f\xca\xf3\xb7\x21\x85\x22\xd3\xb6\x0c\xc6\xcc\x19\x5a\x86\x07\x4c\xff\xab\xe4\x45\x58\x4e\x4b\xb5\xb6\x8c\x03\xc7\xc8\x0f\x21\xf5\x35\x7b\x0c\xa9\x40\xb0\xfd\x33\x6b\xfd\x3e\x96\x07\x12\x79\x52\x45\x99\x4f\x6b\xfd\x42\x23\xd7\xea\x09\x7c\x96\x38\xc3\x41\xb0\x6a\xd3\x19\x09\xbc\x79\x96\xfa\xcd\x76\x4d\x3a\x06\x7b\x1a\x07\x3f\xe5\x6a\xdd\x71\xfd\x3f\xd2\x58\x37\xe1\xc5\xdb\x77\xb7\x61\x2d\xf1\xef\x4c\xfa\xbd\x11\x2e\x71\x4b\x7b\x8a\xe4\x8d\xa5\x76\xd7\x19\xc7\x32\xf6\x8b\xe5\x3e\x7d\x76\x0e\xbb\x2e\xa4\x60\x73\xfd\xfc\x5f\x00\x00\x00\xff\xff\x79\x8e\x4d\x92\x0c\x06\x00\x00")

func squadronChartsExampleValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleValuesYaml,
		"squadron/charts/example/values.yaml",
	)
}

func squadronChartsExampleValuesYaml() (*asset, error) {
	bytes, err := squadronChartsExampleValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/values.yaml", size: 1548, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronNamespacesLocalHelloGroupYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x50\x31\x4e\x04\x31\x0c\xec\xef\x15\xa3\xeb\x97\x50\xa2\x48\xfc\x81\x2f\x44\xc1\x24\x96\x76\xed\x28\xc9\x1e\xc5\x29\x7f\x47\x21\x7b\x28\x4b\x47\x47\x67\xcf\xd8\x33\x9a\x09\x59\xf7\x64\x2f\x40\xa1\x7c\x63\x4f\xa5\xcf\x40\xa4\x75\xd5\xe5\xc0\x06\x04\xb8\x1c\xca\x63\x06\x16\x5c\x97\x25\x64\xa2\xca\x12\x5e\x23\x45\xba\x1e\xdc\xaf\x37\xc0\xab\x54\xc7\x42\xf9\x4d\x73\xb5\x78\x79\xfe\x61\xd2\x19\x60\x09\x99\xca\x64\x12\xb5\xd4\x69\xed\xae\xe2\x36\xb2\xb8\xdf\xf1\xd4\x49\xb4\x36\xb1\x40\x72\x35\x5a\x98\x47\x1a\xf3\x1d\xe4\xb8\xb8\xe9\xba\x6f\x74\x8a\x30\xc4\xbc\xca\x07\x87\x49\xa7\x2b\x0f\x0f\xff\xf9\x8e\xd6\x8c\x4b\x69\x65\xef\x2a\xab\x4c\x67\x9b\xee\x52\x2d\xcc\xf8\x37\xa3\x39\xfe\x53\x6d\x8e\xff\x65\x6b\x7c\xf9\x0a\x00\x00\xff\xff\x2e\xd7\xc8\x6f\x19\x02\x00\x00")

func squadronNamespacesLocalHelloGroupYmlBytes() ([]byte, error) {
	return bindataRead(
		_squadronNamespacesLocalHelloGroupYml,
		"squadron/namespaces/local/hello-group.yml",
	)
}

func squadronNamespacesLocalHelloGroupYml() (*asset, error) {
	bytes, err := squadronNamespacesLocalHelloGroupYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/namespaces/local/hello-group.yml", size: 537, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronServicesExampleYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xc1\x4e\xc3\x30\x10\x44\xef\xf9\x8a\x51\x73\x00\x24\xea\xb6\x88\x93\xff\xc6\xb1\xb7\xf1\x8a\xc4\x1b\xd9\xdb\x94\xfe\x3d\xb2\x53\xa8\x2a\x4e\xd1\x6a\x66\xde\x66\xc7\x85\xf2\xca\x9e\x6c\x07\xf0\xec\x46\xb2\xdb\x67\x9f\xdc\x4c\xe8\x51\x16\xf2\x7c\x66\x2a\xd0\x48\x9b\x84\x26\x69\x74\x8a\x2b\x4f\x13\x06\xc2\xa5\x50\xc0\x35\x52\x82\x0b\x21\x53\x29\x9c\x46\x68\xe4\x82\x3b\xbe\x03\xd4\x8d\x16\x27\x73\xfa\x30\x47\xf4\x90\x45\x59\x92\x9b\x0c\xf8\x8c\x24\xfa\xb7\x28\xbc\x83\xf5\xa5\x40\x56\xca\x99\x03\x25\x0c\x37\xec\x15\x8b\xcb\x6e\x26\xa5\x6c\x7e\xad\xbe\x22\xa1\x52\xb7\xe3\xca\x1a\x9f\x36\x56\x2e\x2b\x12\x51\x28\xd5\x34\x10\xa2\xcb\x01\x5e\x02\x85\x0e\x18\x2e\x3c\x05\x8b\x5d\x10\xff\x45\x79\x1b\x61\x76\xe8\xe1\x65\x9e\x5d\x0a\xdb\x51\x35\xd9\xa4\xc6\xde\xee\x7f\xad\xbf\x4c\x14\x28\xbc\x75\x80\x8f\x2e\x6b\xad\x0f\xad\x18\x8b\x34\x72\xfa\xde\x73\x1a\x6b\x11\xe8\xb7\xba\xe4\xdc\x0a\x6c\xe6\xe6\xcd\xb4\x48\x61\x95\x7c\xb3\x88\xaa\x4b\xb1\x87\x43\xa4\x69\x36\x2d\x6e\xbc\xcc\x87\xa2\x6e\x98\xea\x23\x3c\xbc\xff\x39\x2b\xe5\xc2\x92\x2c\x8e\xe6\xd3\x9c\xd0\xc3\xad\x8e\xa7\x16\xbc\x4b\x4f\x19\x48\x6a\xc3\x03\xf9\x13\x00\x00\xff\xff\xf7\xbc\x47\x00\x01\x02\x00\x00")

func squadronServicesExampleYmlBytes() ([]byte, error) {
	return bindataRead(
		_squadronServicesExampleYml,
		"squadron/services/example.yml",
	)
}

func squadronServicesExampleYml() (*asset, error) {
	bytes, err := squadronServicesExampleYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/services/example.yml", size: 513, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronServicesHelloServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xc1\x52\xc0\x20\x0c\x44\xef\xfd\x8a\x9d\x7a\xd1\x83\xa5\xe3\x91\xbf\x49\x21\x95\x8c\x40\x30\xd0\x8e\xfe\xbd\x63\xab\x8e\xc7\x64\xf7\xbd\xed\x6c\xa7\x04\xf6\x13\x20\x85\x5e\xd9\x63\x57\x2d\xea\xfa\xfb\x41\xd1\xb4\x3e\x27\xce\x59\x27\x60\x3b\x24\x47\x8f\x39\x6a\x78\x63\xbb\x4f\x50\x6b\x59\x02\x0d\xd1\xea\xe6\x09\x08\x89\x6c\x7c\xbb\x80\x4a\x85\x3d\xf8\x83\x4a\xcb\x7c\x7d\x8c\x9b\x76\x19\x6a\x9f\x1e\xbb\x64\xf6\xce\x2d\x7f\x3b\xee\x42\xbb\xfb\x0f\x3c\xa0\xd1\x48\x18\x8a\x91\xf8\x76\x23\x8a\xc1\x38\xd3\x90\x93\x7f\x93\x8d\x3a\xdf\xd5\xc7\x1f\xdc\x3d\x5d\x82\x93\xad\x8b\x56\x8f\x75\x79\x59\xd6\xaf\x00\x00\x00\xff\xff\xa5\x50\x67\xc8\xeb\x00\x00\x00")

func squadronServicesHelloServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_squadronServicesHelloServiceYml,
		"squadron/services/hello-service.yml",
	)
}

func squadronServicesHelloServiceYml() (*asset, error) {
	bytes, err := squadronServicesHelloServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/services/hello-service.yml", size: 235, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronServicesHiServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x41\x4e\xc5\x30\x0c\x44\xf7\x39\xc5\xe8\xb3\x81\x05\xcd\x17\xcb\xdc\xc6\x4d\x5c\x62\x91\xc4\xc1\x49\x2b\xb8\x3d\xa2\x05\xc4\xd2\x9e\x79\x6f\x06\xdb\x21\x91\x83\x03\xa4\xd2\x2b\x07\x6c\xaa\x55\xfd\x78\xdf\x29\x99\xb6\xe7\x2c\x0e\x58\x77\x29\x29\xe0\x96\x34\xbe\xb1\x5d\x27\xa8\xf7\x22\x91\xa6\x68\xf3\x37\x07\xc4\x4c\x36\xbf\x45\x40\xa3\xca\x01\xfc\x41\xb5\x17\x3e\x3f\xc6\x5d\x87\x4c\xb5\xcf\x80\x4d\x0a\x07\xef\x97\xbf\x11\x7f\xa2\xc3\xff\x07\x1e\xd0\x69\x66\x4c\xc5\xcc\x7c\xb9\x91\xc4\x60\x5c\x68\xca\xc1\xbf\xc9\x4a\x83\xaf\xea\xe3\x0f\xee\x9f\x4e\xc1\xc1\x36\x44\x5b\xc0\x7d\x79\x59\xee\xee\x2b\x00\x00\xff\xff\x0d\xaa\xe8\x05\xe9\x00\x00\x00")

func squadronServicesHiServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_squadronServicesHiServiceYml,
		"squadron/services/hi-service.yml",
	)
}

func squadronServicesHiServiceYml() (*asset, error) {
	bytes, err := squadronServicesHiServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/services/hi-service.yml", size: 233, mode: os.FileMode(420), modTime: time.Unix(1593099856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"application/Dockerfile":                                       applicationDockerfile,
	"application/hello.go":                                         applicationHelloGo,
	"squadron/.gitignore":                                          squadronGitignore,
	"squadron/charts/example/.helmignore":                          squadronChartsExampleHelmignore,
	"squadron/charts/example/Chart.yaml":                           squadronChartsExampleChartYaml,
	"squadron/charts/example/templates/_helpers.tpl":               squadronChartsExampleTemplates_helpersTpl,
	"squadron/charts/example/templates/deployment.yaml":            squadronChartsExampleTemplatesDeploymentYaml,
	"squadron/charts/example/templates/ingress.yaml":               squadronChartsExampleTemplatesIngressYaml,
	"squadron/charts/example/templates/service.yaml":               squadronChartsExampleTemplatesServiceYaml,
	"squadron/charts/example/templates/tests/test-connection.yaml": squadronChartsExampleTemplatesTestsTestConnectionYaml,
	"squadron/charts/example/values.yaml":                          squadronChartsExampleValuesYaml,
	"squadron/namespaces/local/hello-group.yml":                    squadronNamespacesLocalHelloGroupYml,
	"squadron/services/example.yml":                                squadronServicesExampleYml,
	"squadron/services/hello-service.yml":                          squadronServicesHelloServiceYml,
	"squadron/services/hi-service.yml":                             squadronServicesHiServiceYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"application": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{applicationDockerfile, map[string]*bintree{}},
		"hello.go":   &bintree{applicationHelloGo, map[string]*bintree{}},
	}},
	"squadron": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{squadronGitignore, map[string]*bintree{}},
		"charts": &bintree{nil, map[string]*bintree{
			"example": &bintree{nil, map[string]*bintree{
				".helmignore": &bintree{squadronChartsExampleHelmignore, map[string]*bintree{}},
				"Chart.yaml":  &bintree{squadronChartsExampleChartYaml, map[string]*bintree{}},
				"templates": &bintree{nil, map[string]*bintree{
					"_helpers.tpl":    &bintree{squadronChartsExampleTemplates_helpersTpl, map[string]*bintree{}},
					"deployment.yaml": &bintree{squadronChartsExampleTemplatesDeploymentYaml, map[string]*bintree{}},
					"ingress.yaml":    &bintree{squadronChartsExampleTemplatesIngressYaml, map[string]*bintree{}},
					"service.yaml":    &bintree{squadronChartsExampleTemplatesServiceYaml, map[string]*bintree{}},
					"tests": &bintree{nil, map[string]*bintree{
						"test-connection.yaml": &bintree{squadronChartsExampleTemplatesTestsTestConnectionYaml, map[string]*bintree{}},
					}},
				}},
				"values.yaml": &bintree{squadronChartsExampleValuesYaml, map[string]*bintree{}},
			}},
		}},
		"namespaces": &bintree{nil, map[string]*bintree{
			"local": &bintree{nil, map[string]*bintree{
				"hello-group.yml": &bintree{squadronNamespacesLocalHelloGroupYml, map[string]*bintree{}},
			}},
		}},
		"services": &bintree{nil, map[string]*bintree{
			"example.yml":       &bintree{squadronServicesExampleYml, map[string]*bintree{}},
			"hello-service.yml": &bintree{squadronServicesHelloServiceYml, map[string]*bintree{}},
			"hi-service.yml":    &bintree{squadronServicesHiServiceYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
