// Code generated for package exampledata by go-bindata DO NOT EDIT. (@generated)
// sources:
// example/application/Dockerfile
// example/application/hello.go
// example/squadron/.gitignore
// example/squadron/charts/example/.helmignore
// example/squadron/charts/example/Chart.yaml
// example/squadron/charts/example/templates/_helpers.tpl
// example/squadron/charts/example/templates/deployment.yaml
// example/squadron/charts/example/templates/ingress.yaml
// example/squadron/charts/example/templates/service.yaml
// example/squadron/charts/example/templates/tests/test-connection.yaml
// example/squadron/charts/example/values.yaml
// example/squadron/namespaces/local/hello-squadron.yml
// example/squadron/services/example.yml
// example/squadron/services/hello-service.yml
// example/squadron/services/hi-service.yml
package exampledata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _applicationDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x4a\xcc\x29\xc8\xcc\x4b\x55\x70\x0c\x56\x48\x2a\xcd\xcc\x49\x49\x2d\xe2\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\xe2\x0a\x0a\xf5\x53\x48\xcf\x87\xc8\x28\xe8\xe6\x2b\xe8\x67\xa4\xe6\xe4\xe4\x83\x64\xc0\x46\x40\xf4\x5a\xe5\x24\x96\xa4\x16\x97\x40\xf5\xe9\xea\xa6\x15\xe5\xe7\xda\x42\x0d\x83\xe9\x80\x50\x5c\x5c\xae\x7e\x21\x41\x91\x01\xfe\x9e\x7e\x21\x0a\xd1\x4a\x10\x41\xa5\x58\x40\x00\x00\x00\xff\xff\x8e\x35\x03\xdb\x8f\x00\x00\x00")

func applicationDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_applicationDockerfile,
		"application/Dockerfile",
	)
}

func applicationDockerfile() (*asset, error) {
	bytes, err := applicationDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application/Dockerfile", size: 143, mode: os.FileMode(420), modTime: time.Unix(1590781685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _applicationHelloGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xb1\x4e\x03\x31\x0c\x9d\xe3\xaf\xb0\x32\x25\xd5\xe9\x60\x44\x95\x3a\x74\xa0\x74\xa8\x04\xa2\x03\x03\x42\x55\xe8\xb9\x69\x44\x9a\x3b\x12\x97\x0a\xa1\xfe\x3b\x4a\x2e\x45\x95\x98\x6c\x3f\x3f\x3f\xdb\x6f\x30\xdb\x0f\x63\x09\x0f\xc6\x05\x00\x77\x18\xfa\xc8\xa8\x40\xc8\x9d\x37\x56\x82\x90\xbe\x2f\x21\x10\xdf\xec\x99\x07\x09\x1a\x60\x77\x0c\xdb\x32\xa1\x34\xfe\x80\xc8\xd4\x79\xd7\x45\x4a\x09\xa7\x33\xcc\x65\xbb\xe6\xe8\x82\x55\xd2\x8c\xb8\x6c\x50\x4e\xef\x6e\x73\xa8\x08\x72\x8f\xde\x25\xa6\x90\x33\xa9\x47\x99\x87\x48\xc4\x2e\xd8\x7f\x3a\xb6\x36\xb2\xc2\xf2\x7e\xb5\x7a\xcc\x49\x22\x4e\xc8\x7b\xc2\x4b\x17\x0f\x94\x92\xb1\x74\x91\x6b\x9f\x4c\x4c\xa4\x34\x80\xb0\x57\xca\xaf\x6f\xef\xdf\x4c\x6a\x72\xbd\x31\x73\xf6\x26\x74\x9e\x62\xa6\xe4\x5f\xdb\xe5\x58\x2f\x8e\x61\xab\xf2\xcf\xea\x34\xe2\xcf\x94\x86\x3e\x24\x7a\x89\x8e\x29\x36\x18\x71\x52\xf1\xcf\x23\x25\x2e\xa6\x88\x4d\x83\x1b\x9c\xe1\xa9\x2d\x2c\x65\xff\xf6\x88\x73\xde\xe5\x7b\xdb\x2e\x0c\x1b\xaf\xca\xe8\xaa\x58\x31\x0f\xdd\x9a\xe2\x57\x3d\xad\x7a\xda\x60\xbd\x4b\x6b\x38\xc3\x6f\x00\x00\x00\xff\xff\xff\x16\x4b\x76\xb1\x01\x00\x00")

func applicationHelloGoBytes() ([]byte, error) {
	return bindataRead(
		_applicationHelloGo,
		"application/hello.go",
	)
}

func applicationHelloGo() (*asset, error) {
	bytes, err := applicationHelloGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application/hello.go", size: 433, mode: os.FileMode(420), modTime: time.Unix(1590781685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x2b\xcf\x2f\xca\x4e\xc9\x2c\x02\x04\x00\x00\xff\xff\x88\x9c\x6c\x73\x08\x00\x00\x00")

func squadronGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_squadronGitignore,
		"squadron/.gitignore",
	)
}

func squadronGitignore() (*asset, error) {
	bytes, err := squadronGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/.gitignore", size: 8, mode: os.FileMode(420), modTime: time.Unix(1593103023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleHelmignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x23\x31\x0c\x86\xef\x7a\x8a\x7f\x99\xcb\xee\xb0\x78\x1e\x22\xd9\xc3\x9e\x5a\x48\xc9\xb5\x78\x66\x14\x5b\x89\xc7\x36\x96\x26\x69\x7b\xe8\xb3\x97\x24\x84\xf6\xf2\x81\x3e\x24\xf1\x75\x78\xf6\x66\xdc\xb2\xc2\x0a\x24\xe4\xd2\x18\x97\xc8\x19\xe3\x2a\x69\x96\x1c\x50\xfd\x74\xf2\x81\xd5\x51\x87\x97\x28\x0a\x5d\x6b\x2d\xcd\x14\x1a\x39\x25\x84\x54\x46\x2c\xde\xa6\x28\x39\xfc\x45\xe3\xe4\x4d\xce\x8c\xea\x2d\xfe\xf0\x3e\xcf\xd4\x21\x73\xf0\x26\x25\xe3\x77\x6d\x7c\x90\x37\x9e\x71\x11\x8b\xf8\xf5\xc7\xe1\x29\xa7\x77\x94\x7c\xbb\xbc\x26\xa1\x72\x43\x92\xcc\x8e\xdc\x76\xf7\xba\xb3\xd2\x98\x3a\x6c\xca\xb2\x94\x8c\xfd\x66\x87\x59\x9a\x92\x0b\x62\xc3\x8d\xf7\x7c\x72\xe3\x47\x1b\x6e\x7c\x88\x18\x86\x2b\x1e\xa3\x9e\xf3\xf0\xfd\x68\xf4\xd3\x69\xad\x38\x48\x62\xa5\xde\xe9\xa5\x52\xef\x46\x7f\xa2\xde\xd9\x52\xa9\xff\xa4\x0e\x7b\xdf\xa4\xac\x8a\xff\xdb\x7f\x4a\xae\xb6\x72\xe4\xc9\xc8\xc9\xcc\x7e\xb8\xef\xb5\x72\x24\x77\xd6\xa9\xcc\x3c\xd0\x57\x00\x00\x00\xff\xff\xf5\x89\xaa\x2d\x56\x01\x00\x00")

func squadronChartsExampleHelmignoreBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleHelmignore,
		"squadron/charts/example/.helmignore",
	)
}

func squadronChartsExampleHelmignore() (*asset, error) {
	bytes, err := squadronChartsExampleHelmignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/.helmignore", size: 342, mode: os.FileMode(420), modTime: time.Unix(1593103023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleChartYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\x4a\x2c\x28\x80\x73\x95\x0c\xf5\x0c\x94\xb8\x52\x52\x8b\x93\x8b\x32\x0b\x4a\xc0\x42\x8e\x79\x0a\xae\x15\x89\xb9\x05\x39\xa9\x0a\xce\x19\x89\x45\x25\x0a\x69\xf9\x45\x0a\xc1\x85\xa5\x89\x29\x45\xf9\x79\x5c\x79\x89\xb9\xa9\x56\x0a\xa9\x10\x05\x5c\x65\x30\x73\x0c\xf4\x8c\xf4\x8c\xb8\x00\x01\x00\x00\xff\xff\x8a\xb8\xdf\x8f\x69\x00\x00\x00")

func squadronChartsExampleChartYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleChartYaml,
		"squadron/charts/example/Chart.yaml",
	)
}

func squadronChartsExampleChartYaml() (*asset, error) {
	bytes, err := squadronChartsExampleChartYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/Chart.yaml", size: 105, mode: os.FileMode(420), modTime: time.Unix(1593591453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplates_helpersTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x0f\xd1\x40\x9b\xb2\xce\xa1\xd0\xc3\x42\x4e\x69\x0f\xa5\x90\x42\x03\xe9\xb1\xc8\xf6\xa8\x3b\x20\xcb\xae\x46\xda\xee\x92\xe4\xbf\x17\x49\x8e\x77\xb7\xe0\xb2\x7b\x1b\xac\xa7\x37\x6f\xbe\x91\x9f\x9e\x6e\xae\xb1\xe5\x7e\x0d\xa1\x00\xc3\x96\xc2\x7e\xa4\xdb\x3e\x4a\xd0\xed\x86\xd6\xb8\xbe\x79\x79\xa9\x92\xaa\xfa\xbc\x1b\xb5\xeb\x10\x36\x04\xa7\x7b\xc2\x60\x72\xdd\x6e\xb4\x0f\x75\x35\xe9\x56\xe8\xc8\xb0\x23\x28\xda\xe9\x7e\xb4\x54\x27\xad\xc2\xea\x70\xaa\xa3\x0d\xa8\xef\xf2\xb5\xfb\x64\x54\x3f\x6a\x1b\x49\xb2\xf2\xdb\x96\xbc\xe7\x8e\xf0\x8c\xe0\xa3\x6b\xf1\xf1\x43\x2e\xb9\x7f\x88\xc6\xf0\x0e\x6a\x75\x30\x23\xd7\xe5\xba\xe4\xbb\xf3\xa4\x03\x41\xcf\x3d\x4c\xb4\x76\x8f\xdf\x51\x5b\x36\x4c\x1d\xf4\x38\xe6\xe4\x75\xf5\x83\x8a\x7b\xd6\x87\xd4\x23\x4d\x21\x68\xa8\xd5\x51\x08\x32\xf4\x84\xaf\xb1\x21\xef\x28\x90\x94\x79\x0d\x93\xed\x04\xda\x13\x2c\xf7\x1c\xa8\x43\x18\x10\x36\x2c\x78\xdb\xec\x33\x8b\x4f\xf7\x0f\x49\xcb\xee\x17\x64\xa4\xf6\x5d\x5d\x7d\x31\xf0\x64\x49\xcb\x04\xad\x1d\x5c\xd0\xec\xa4\x60\x2b\xdf\x38\xe0\x0f\x5b\x8b\x86\x10\x25\xe5\x14\xe8\x1c\x7e\x4a\xbb\x88\x36\x69\x4e\xf1\xb2\x99\x69\xbe\x1e\xce\x44\x5f\x35\x8b\x82\xb3\x90\x5b\x39\x38\xbd\xc9\xf1\xd7\xb7\xe7\x6f\xf5\x28\xe7\x4c\xa2\xb8\xd4\xdf\x0b\xa6\x72\x79\xce\x7a\xf2\xf5\xe2\x80\xa3\x67\x17\x0c\xd4\x95\xac\xae\x44\xfd\xe3\x56\xfa\x5e\xf2\xce\x96\xea\x93\xf7\x77\xb4\xd8\xf4\xbb\x6c\xc9\x0b\x0f\x2e\x2d\x35\x2f\x77\x7a\x29\x45\x65\x75\x43\xf6\x3f\x0b\xce\x2a\xb5\x38\xce\x31\xed\x52\x3f\x4e\xdd\x9e\xe1\x69\xb4\xba\x25\xa8\xf7\x0a\xea\xa7\xba\x68\xce\xbf\x01\x00\x00\xff\xff\xef\x62\xa1\x95\x15\x04\x00\x00")

func squadronChartsExampleTemplates_helpersTplBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplates_helpersTpl,
		"squadron/charts/example/templates/_helpers.tpl",
	)
}

func squadronChartsExampleTemplates_helpersTpl() (*asset, error) {
	bytes, err := squadronChartsExampleTemplates_helpersTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/_helpers.tpl", size: 1045, mode: os.FileMode(420), modTime: time.Unix(1593103023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x88\xde\xe3\xa2\x3b\x0d\xbe\x66\xc7\x6d\x30\xda\xa1\xc0\x8e\x8c\xcd\xc4\x42\x25\x51\x90\x68\x0f\x41\x96\x7f\x1f\x14\x3b\x8e\x15\xa7\x49\x13\x74\xbe\x99\x7a\xe4\x7b\x7a\xa4\x88\x4e\xbd\x92\x0f\x8a\x6d\x0e\xe8\x5c\x78\x6c\x9f\x66\x6f\xca\x56\x39\x7c\x23\xa7\x79\x63\xc8\xca\xcc\x90\x60\x85\x82\xf9\x0c\xc0\xa2\xa1\x1c\x1e\xb6\x5b\xc8\x16\x35\x7a\xc9\x7e\xa2\x21\xd8\xed\x1e\x66\x00\x1a\x97\xa4\x43\x44\x41\x2c\x96\xbd\x35\x4b\xf2\x96\x84\x42\xa6\xf8\xb1\xcb\x9c\x24\xbe\x83\x76\xe8\x65\xce\xab\x2e\xe1\x99\x34\x61\xa0\x2b\x29\x06\x2d\xae\xa9\x9a\x2f\x37\x69\xd6\x0b\xf9\x56\x95\x43\x62\x4d\xda\x64\xa1\x7e\x2c\xa3\x8a\xfe\x2a\x27\x04\xf3\x71\xec\x99\x5a\x15\x0d\xda\x5f\x32\x38\x2a\xe3\x05\x3d\x39\xad\x4a\x0c\x1d\xd3\x2b\xea\x86\x42\xd6\x07\x17\xdc\x58\xe9\xd8\x02\x69\x2a\x85\x7d\xe7\x89\x41\x29\xeb\xef\x23\x93\x6e\xb5\xe9\x0e\xa3\x84\x8c\xd3\x28\xd4\x2b\x18\x75\x32\x7e\x3a\x11\x73\xbb\x9c\xbb\x3a\x77\xf0\x30\x7e\x25\x5b\x41\x65\xc9\x8f\x44\xcc\xe1\x1a\x29\x80\x32\xb8\x3e\xcc\x61\xef\xfe\x3e\x14\x7b\xc0\x41\x09\xfb\x0d\xec\x76\xf9\xe4\x58\x70\xdd\x0f\x6b\x52\xa9\x68\xb4\x2e\x58\xab\x72\x93\x34\xb4\xcb\x71\xc3\x61\xaa\x61\xbb\x9d\xc3\x1f\x25\xf5\x00\x47\xbf\x0e\x29\x24\x46\xf2\xd1\x7f\x97\x24\xfc\x1b\x8d\x86\x0c\xfe\x82\x55\xb6\x22\x2b\xf0\xf4\x65\x5a\x9b\x6c\x75\x85\x90\x6c\x9b\x22\xc8\xb6\x9f\x47\xe7\xd8\x4b\xa2\x3e\xa2\x3c\xda\x35\x0d\x02\x42\xf7\xb4\xb2\x3d\x34\xcd\x8e\x7d\x1c\xba\x5b\x70\x7c\x6a\xd1\xd9\x53\x10\x80\xf3\x2c\x5c\xb2\xce\xe1\xd7\xa2\xb8\xd9\x82\x83\x02\xad\x5a\xb2\x14\x42\xe1\x79\x79\x32\x2b\xc9\xd1\x7f\xec\xc6\x41\x8a\x27\xac\xd4\x3b\x5a\xd2\xb3\xcf\x13\xe3\x29\x70\xe3\x4b\xba\x30\x6d\xc3\x92\xea\x91\x17\x28\x5a\xd6\x8d\xa1\x1f\x71\x8f\x9d\x29\x98\x8e\x40\x87\x3d\xd3\xfc\xe3\x23\xb6\x93\xe7\x1b\x3f\x13\xcb\x17\x28\x75\x07\x32\xc7\xad\x79\xe1\xae\x3d\xdb\x51\xd4\x87\x04\x5d\x16\x53\x73\xe8\x74\x24\xd4\x6e\x50\x16\xcf\xc7\x19\x13\x51\x93\x49\xb0\x5c\xd1\x4b\xbf\xfa\x8f\xb0\x71\x34\xbd\xc0\x99\xae\x7f\x4d\xcb\x8f\xf8\xa6\x6b\x67\xb5\x52\x56\xc9\x68\x3b\x1d\x22\x1f\x67\xb9\xc6\x21\xac\xc9\xa3\x28\xb6\x23\x63\x47\xc1\xbb\x98\xfe\x05\x00\x00\xff\xff\x70\x4c\x3a\x8a\x7d\x08\x00\x00")

func squadronChartsExampleTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplatesDeploymentYaml,
		"squadron/charts/example/templates/deployment.yaml",
	)
}

func squadronChartsExampleTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := squadronChartsExampleTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/deployment.yaml", size: 2173, mode: os.FileMode(420), modTime: time.Unix(1593591453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplatesIngressYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\xa3\x30\x10\x85\xef\xfc\x8a\x51\xb4\x57\x1c\x45\xda\x93\xa5\x3d\xed\x69\x2f\xab\x55\x56\x8a\xd4\xe3\x00\x93\x60\x05\xc6\x96\x3d\x49\x5b\x51\xfe\x7b\x65\x0c\x81\x24\x4d\xdb\x9c\x98\xc9\xbc\xf1\x7b\x1f\xb8\xeb\x72\x30\x7b\x50\x3b\x6c\x4e\x14\x94\xe1\x83\xa7\x10\x54\x6d\x83\x04\xe8\xfb\xac\xeb\xe0\x47\x20\x7f\x36\x25\xfd\xc5\x96\x40\xff\x02\xf5\xbb\x46\x2f\x6a\x28\xfb\x3e\x43\x67\x76\xe4\x83\xb1\xac\x81\x5e\x84\x38\x3e\x86\xf5\x79\x53\x90\xe0\x26\x3b\x1a\xae\x34\xfc\x49\x7b\xb3\x96\x04\x2b\x14\xd4\x19\x00\x63\x4b\x1a\x56\x5d\x77\xb3\x71\x95\x01\x34\x58\x50\x13\xe2\x14\x00\x3a\xa7\x8e\xa7\x82\x3c\x93\x44\x8b\x76\x9d\x94\x77\xc2\x07\xd3\x0e\xbd\xe4\x76\x9f\x04\x5b\x6a\x08\x03\x7d\x21\x69\x91\xf1\x40\x55\x5e\xbc\x5e\xab\xfe\x27\x12\x93\xb0\xa6\xa6\x55\xa1\x5e\x97\xd1\xc5\x18\xe5\xe6\x80\x7c\xd9\xdb\xd2\xd9\x44\x3a\x63\xc8\xc8\xfe\xd9\x48\x7d\x47\x1f\x99\xad\xa0\x44\x8e\xe9\xa8\x45\x23\x31\x89\x52\xb1\x4f\xd8\x36\xa0\xe0\x0d\xd8\x70\x45\x2c\xf0\x33\x8d\xc7\x7f\x89\xab\x58\x04\x47\xa5\xce\x1e\xbc\xe5\x40\xa5\x27\x99\x51\xc8\x84\x3c\x87\xe1\x03\x48\x45\xdc\x07\x1e\xf9\x40\x8f\x3f\x93\x34\x97\x0f\xb0\x78\x81\x76\xd0\x8e\x56\x52\x3d\x9f\x99\xd0\x7e\x6a\x69\x11\x04\xc0\x9f\x1a\xba\xc4\xff\x8e\xa1\x94\x42\x7f\x60\xaa\x16\x71\x53\x38\x00\x87\x52\x87\xb9\x8c\xc2\xd8\x4a\xc2\xf8\x34\x0b\xd3\xaf\xc0\xf2\x48\x5c\xe9\xab\x66\x8c\x76\xb9\x27\x83\xf6\xea\xe2\xdc\xac\xb8\x4c\xff\xb3\x7e\xb4\xe8\xac\x97\x69\x6c\xa6\xb6\x40\xf0\x1e\x00\x00\xff\xff\x31\xec\x29\x14\xac\x03\x00\x00")

func squadronChartsExampleTemplatesIngressYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplatesIngressYaml,
		"squadron/charts/example/templates/ingress.yaml",
	)
}

func squadronChartsExampleTemplatesIngressYaml() (*asset, error) {
	bytes, err := squadronChartsExampleTemplatesIngressYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/ingress.yaml", size: 940, mode: os.FileMode(420), modTime: time.Unix(1593591453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x25\x77\x2b\xf4\xaa\x6b\xee\xa5\xa4\x25\xf7\xb5\x3c\x8d\x45\xf4\x87\xa4\x18\x82\xf1\xbb\x17\xf9\x07\x5a\xea\x52\xa2\xa3\xf6\x1b\x66\x66\x97\xa3\xb9\x20\x65\x13\xbc\xa2\xe1\x45\xdc\x8c\xef\x14\xbd\x23\x0d\x46\x43\x38\x14\xee\xb8\xb0\x12\x44\x9e\x1d\x14\x8d\x23\xc9\x53\xcf\xa9\xc8\x57\x76\xa0\x69\x12\x44\x96\x5b\xd8\x5c\x19\x22\x8e\x51\xde\xee\x2d\x92\x47\x41\x96\x26\x1c\xff\xd6\xed\xd1\x91\x53\x69\xc2\xe7\x22\x38\xc3\x82\x33\xfe\x91\x38\xf6\x7c\x45\xd7\xb4\x8f\x9f\xaa\xb5\xc4\x26\xec\x61\x9d\xcc\xfd\x51\xd7\x14\x8a\x0e\x3b\x06\xcd\xf7\xbf\x33\x06\x53\xd7\x42\xd3\x74\x10\x39\x42\xd7\x82\x19\x16\xba\x84\xf4\x7c\xd9\xf2\x88\xeb\xe4\xc2\xf6\x8e\x2c\xf3\x12\x4f\xd6\xc1\x82\xc4\x90\xca\xba\xc6\x71\xa4\xc4\xfe\x8a\x5f\xf4\xcc\x6c\x95\x9a\xf5\x28\x73\x97\x39\x27\xcd\xaf\x42\x8b\xd7\x46\x12\xc5\x14\x4a\xd0\xc1\x2a\xfa\x38\xbd\x6d\x1e\xf0\x5d\x25\xbe\x02\x00\x00\xff\xff\x89\x92\x9f\xc0\x04\x02\x00\x00")

func squadronChartsExampleTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplatesServiceYaml,
		"squadron/charts/example/templates/service.yaml",
	)
}

func squadronChartsExampleTemplatesServiceYaml() (*asset, error) {
	bytes, err := squadronChartsExampleTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/service.yaml", size: 516, mode: os.FileMode(420), modTime: time.Unix(1593591453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleTemplatesTestsTestConnectionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x31\x6f\xe3\x30\x0c\x85\x77\xff\x0a\xc2\x4b\x26\x2b\xb8\x55\xeb\xed\x41\x70\x07\x64\x09\x3a\xd0\x32\x6b\x0b\x91\x28\x43\xa4\xd3\x04\x81\xff\x7b\x21\xdb\x45\x0b\x34\x45\xd7\xa7\xf7\x3d\xea\x91\x38\xfa\x13\x65\xf1\x89\x2d\x5c\xff\x54\x17\xcf\x9d\x85\x63\xea\xaa\x48\x8a\x1d\x2a\xda\x0a\x80\x31\x92\x85\xfa\xf1\x00\xcf\x2e\x4c\x1d\x41\x4d\x37\x8c\x63\x20\xf3\x3a\x85\x50\x9e\x6b\x30\x30\xcf\x8d\x92\x68\xe3\x12\x33\x39\xf5\x89\xeb\x0a\x20\x60\x4b\x41\x4a\x0c\x00\x8e\xa3\xb9\x4c\x2d\x65\x26\x25\x31\x3e\xed\xd7\xe8\x67\xc9\x9f\xa9\x0b\x3a\x50\x88\x46\x86\xbd\x1b\x30\xeb\x73\x62\x79\xfa\x82\x7c\x9f\xe6\x59\x14\xd9\xad\x13\xcd\xdf\xe2\x37\x07\x8c\xf4\x33\x11\x91\xb1\xa7\xae\x69\xef\x2b\xf3\x8f\x02\xa1\x90\xf9\x4f\xf9\xea\xdd\x06\x22\x73\x52\x2c\x85\xb7\x9e\xf5\xc7\x6f\x87\x94\x2e\xb5\x85\x65\x2d\x32\x39\x47\x22\x95\x8c\xe4\x8a\xcd\x25\x56\xf4\x4c\x79\x83\x9a\x6d\xcf\x6f\x3d\xe9\x22\x00\xf8\x88\x3d\x59\x68\x27\xb9\xb7\xe9\xb6\x89\x2e\xc5\x88\xe5\x4c\xe7\x5d\xb1\xee\x5e\x36\x1d\x73\x2f\x16\xe0\xbc\xfb\xfd\x4e\xb6\x54\x39\x61\x98\x48\x8c\xac\x4d\xcc\x98\xb2\xc2\x3c\x2f\x71\x99\x44\x31\xeb\x31\x05\xef\xee\x16\x0e\x74\xa5\x5c\xbd\x07\x00\x00\xff\xff\xc8\x16\x9f\x0f\x2b\x02\x00\x00")

func squadronChartsExampleTemplatesTestsTestConnectionYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleTemplatesTestsTestConnectionYaml,
		"squadron/charts/example/templates/tests/test-connection.yaml",
	)
}

func squadronChartsExampleTemplatesTestsTestConnectionYaml() (*asset, error) {
	bytes, err := squadronChartsExampleTemplatesTestsTestConnectionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/templates/tests/test-connection.yaml", size: 555, mode: os.FileMode(420), modTime: time.Unix(1593103023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronChartsExampleValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\x1c\x37\x0c\xbd\xeb\x57\x3c\x6c\x0e\xb9\xd8\x5b\x3b\xbd\x04\x03\xe4\x60\x24\x6d\x11\x20\x76\x8c\xda\x45\x51\x04\x39\x68\x35\x9c\x1d\xb5\x1a\x71\x4a\x52\xeb\x0c\x8a\xfe\xf7\x42\xda\xf1\x47\xe2\x1c\x7a\x5a\xae\xe6\x91\x7a\x7c\x7a\xe4\x0b\xbc\xa3\xc1\x97\x64\x38\xf8\x54\x48\x31\xb0\xc0\x48\x6d\xeb\x5e\xe0\x76\x8c\x8a\xa8\xf0\xf8\xe3\xe2\xf2\xc3\xe9\xc0\x32\x79\x33\xea\x31\xc4\x44\x15\xf0\x8e\x42\xf2\x42\x38\x78\x89\x7e\x97\x48\x61\x8c\x1d\x61\xf6\xaa\xd4\x23\x66\x63\x2c\x5c\x6a\xc5\x69\x4e\xde\x48\xb7\xce\x09\xcd\x29\x06\xff\x96\x4b\xb6\x0e\xe7\xce\xc5\xc9\xef\xa9\x73\x80\xd0\xcc\x1a\x8d\x65\xe9\x90\xf7\x31\x7f\x71\x80\xf9\x7d\x87\x96\x6a\x0e\x98\x4b\x4a\xd7\x9c\x62\x58\x3a\xbc\x1f\xae\xd8\xae\x85\x94\xb2\xad\x45\xae\x4b\x4a\x37\x14\x84\x4c\x3b\x7c\xfa\xec\xb2\x9f\xe8\xe3\x81\x44\x62\x4f\x1d\x36\x1b\x37\x94\x94\x9e\x1d\x3a\x25\x39\xc4\x40\x17\x21\x34\x4e\x0e\x78\x81\x9b\x99\x42\x1c\x22\x29\xee\x46\xb2\x91\x04\x1e\x2b\x0e\xfe\x08\x84\x8e\x5c\x52\x5f\x1b\x0e\x42\xde\xa8\x77\x58\xa3\x0e\x26\x85\x5a\xa1\x8b\x9c\xd9\xbc\x45\xce\x4d\x1d\xdf\xf7\xf5\xc7\x46\xfa\xb6\x9c\x03\xfc\x23\xb6\xc3\x3f\xff\xb6\xfc\xdb\x91\x50\x29\x83\x87\xef\x65\xd5\x62\x45\x69\xdb\xb0\xef\x07\x64\x36\x28\x19\x7c\xee\x57\x2e\xf5\x05\x2b\x9b\x13\xf8\x63\xa1\xa8\xd8\x53\x26\xa9\x8c\x51\x34\xe6\x7d\x2b\x7c\xaf\xcd\xc3\x63\x39\x34\x7c\xe7\xdc\xcc\xfd\x0d\x85\x22\xd1\x96\xb7\x9c\x8d\xbe\xd8\x03\xbd\x41\x7f\x11\x2e\x73\x87\x57\x67\x67\x67\x55\xca\xef\xc3\x82\x9f\xfd\x2e\xa6\x68\x91\xf4\x28\x30\xd0\x0b\xcf\xf7\xf1\x29\x2e\x3e\x7c\x68\xb1\x90\xef\x3f\xe6\xb4\xfc\xca\x6c\x3f\xc7\x44\xba\xa8\xd1\xf4\x44\x50\x29\xf9\x42\xaf\x38\x57\xc0\xb7\xc7\xbf\x29\x49\x87\xf3\x95\x4a\x13\xaa\xde\x60\xcb\x4c\x1d\xde\xa6\xa2\x46\xf2\xfe\xba\x1a\x89\xc5\x3a\xbc\x3e\x5b\xc3\xc6\xa9\xb2\xf8\xb1\xa6\x02\x29\x1e\x28\x93\xea\xb5\xf0\x8e\xd6\x26\x2a\xb1\xf8\xf5\xa1\xa3\x7c\x68\x46\xab\x04\x4e\x8f\x6a\xe1\xf6\xa7\x9b\xdb\xb5\xab\x36\x53\x1d\x36\xd5\xbd\x1b\xe7\xbc\xec\xf5\x09\x7c\xe3\x65\x7f\xfe\xe6\x0d\x67\xda\x38\xe7\x62\xde\x0b\x69\x23\xf2\xdc\x06\x35\xe1\xaf\xb2\x23\xc9\x54\x87\x28\xf2\x0f\x2b\x7c\x1b\x92\x57\x7d\x1c\x97\xe7\x40\x4b\x7a\xea\xc3\xd4\x68\x48\xa1\x8d\x03\x46\x56\x6b\xce\x07\x66\x6f\xe3\x1a\x6a\x1b\x9c\xab\xd6\x43\x9d\x0a\x21\xe5\x22\x81\x1e\xad\xf8\x3b\xa1\x68\xf1\x29\x2d\x10\x0a\x3c\x4d\x94\xfb\x66\x38\x63\x68\x9b\x97\x05\xfd\xba\x4e\x1e\xb2\x9b\x13\x8d\x91\xc8\x1f\x08\x56\x57\x8a\xaf\x2b\x25\x70\xd6\x10\xb9\xe8\xd1\x1f\x23\x57\x53\xb7\xed\x33\xd6\x6b\x48\xb6\xc7\xfd\xe3\x93\x32\x62\xae\x5e\x56\x52\x84\xd1\xe7\x70\xfc\x15\xd3\xfa\xea\xe0\x0c\xca\x87\x28\x9c\x27\xca\xa6\xb8\x8b\x36\x22\x45\xb3\xb4\x3a\xe3\x9e\xca\x09\xb4\x84\xb1\x5e\x7f\x19\x73\xac\x32\x6d\xeb\xc8\x2c\x5c\xd0\x33\xee\x7c\xfe\xaa\x93\x27\x69\x25\x1f\xbb\xb5\xe3\xa0\x70\x4a\x7c\x17\xf3\xbe\x55\x4f\xd5\x13\x27\xf0\xfd\x9f\x45\xdb\xf7\xa9\x5e\x90\x29\x90\xaa\x97\xe5\xa4\xf5\x2f\x34\x71\xeb\x9e\x10\x8a\xa4\x05\x3b\xf1\x4d\x9b\xc1\x48\xf0\xf2\x51\xea\x97\xdb\xb5\xe8\x14\xed\x61\x50\xc2\x5c\x9a\xa9\xa7\xf5\xff\x44\x53\xdb\x91\xe7\xaf\x5e\x5f\xc6\xb5\xc5\xbf\x0b\xe9\xff\xcd\x70\x99\x7b\xba\xa1\x44\xc1\x58\x8e\x46\x36\x4e\x75\x21\x1c\x2d\xf7\xe9\xb3\x73\x7e\x18\x62\x8e\xb6\xb4\xcf\xff\x05\x00\x00\xff\xff\xa2\xea\x62\xdf\x26\x06\x00\x00")

func squadronChartsExampleValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_squadronChartsExampleValuesYaml,
		"squadron/charts/example/values.yaml",
	)
}

func squadronChartsExampleValuesYaml() (*asset, error) {
	bytes, err := squadronChartsExampleValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/charts/example/values.yaml", size: 1574, mode: os.FileMode(420), modTime: time.Unix(1593591952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronNamespacesLocalHelloSquadronYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xcd\x6e\x83\x30\x10\x84\xef\x79\x8a\x51\xee\x60\x7a\xab\x2c\xf5\x1d\xfa\x0a\x2b\xb2\x31\x2b\x81\x97\xda\x86\xaa\x8a\x78\xf7\x8a\xf2\x13\x40\x6d\x0f\xad\x72\xf4\xcc\x8e\x67\xed\x2f\xbe\x75\x74\x09\xea\xed\x09\xe8\x39\x44\x51\x6f\x51\xe4\x45\xfe\x74\x02\x22\x87\x5e\x4a\x8e\xa3\x09\x54\x5c\xd7\x9a\xcd\xda\x24\x01\xd2\x90\x5b\x0f\x40\xe0\x56\xa3\x24\x0d\x1f\x16\x57\xd5\x46\xcd\x52\x90\x7d\xc5\xd7\xc1\x44\xce\xa2\xa6\xc4\x31\xcd\x1a\x05\x17\xef\x17\x65\x38\x67\x99\x0b\xcc\x49\xbc\x7b\xa9\xb8\xe2\xf3\xec\x1d\x16\x00\x5a\x0d\x69\x93\x1c\xb3\xcf\xc5\xe1\xb8\x0a\xe2\x5d\xe0\xb8\x19\xaf\x34\x1e\xd3\x9e\x1a\xb6\xb8\xdd\x90\x8f\x26\x86\x61\xe3\x02\x2d\xa5\xca\xc2\x2c\x7f\x63\xf6\xef\x5a\x16\xb2\xf7\x1d\x7a\xad\xbb\x86\x77\x6f\x9b\x1a\x4a\xf5\x57\x71\x9b\xe8\x58\x37\x15\x97\xef\x17\x0c\x83\xa1\xb6\xad\xa5\xa4\x24\xea\x37\x63\x8d\x76\x3e\x59\x98\x29\x6f\x26\x38\xf2\x0f\x32\xf2\x57\x2c\x24\x3f\x52\x29\xd5\x27\x12\xcf\xe1\x75\xff\x1b\xbf\xf3\x7a\x00\x1e\xf9\x9e\xcd\x67\x00\x00\x00\xff\xff\x21\x7e\x0a\xfb\xf9\x02\x00\x00")

func squadronNamespacesLocalHelloSquadronYmlBytes() ([]byte, error) {
	return bindataRead(
		_squadronNamespacesLocalHelloSquadronYml,
		"squadron/namespaces/local/hello-squadron.yml",
	)
}

func squadronNamespacesLocalHelloSquadronYml() (*asset, error) {
	bytes, err := squadronNamespacesLocalHelloSquadronYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/namespaces/local/hello-squadron.yml", size: 761, mode: os.FileMode(420), modTime: time.Unix(1593591682, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronServicesExampleYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\x52\xe4\x30\x0c\x84\xef\x3c\x45\x17\x39\x2c\x54\xcd\x24\xcc\xd6\x9e\xfc\x36\x9e\x58\x93\xa8\xf0\x1f\xb2\x12\xe0\xed\xb7\x6c\x07\x66\xd9\x53\xe2\x6a\xa9\xbf\x56\x17\x92\x9d\x67\x32\x0f\xc0\x75\x63\xef\xea\x0f\xc0\xc1\x2e\x64\xfa\xe7\x1c\x6d\x20\x0c\x28\x99\x66\xbe\x31\x15\xe8\x4a\x5d\x42\x93\x74\xb5\x8a\x77\xf6\x1e\x57\xc2\x56\xc8\xe1\x7d\xa5\xd8\xed\x38\x2e\xd0\x95\x0b\x0e\x4e\x73\x57\xbb\x18\x5c\xc6\xcb\xef\xf1\x05\x03\x52\x56\x4e\xd1\xfa\x11\x7c\x43\x4c\xfa\x0d\x72\x27\xb0\xfe\x2a\x48\x3b\x89\xb0\xab\x96\x9f\x38\x2b\xb2\x15\x1b\x48\x49\x9a\xd9\x9c\x42\xb0\xd1\x19\x3c\xba\x34\xbf\x92\x74\x2e\xc6\x47\x0c\x5f\x5a\x0f\xa5\xe9\x90\x5a\x9e\x9e\xff\xa9\x22\x89\x1c\xb9\xe7\x53\xc5\xa7\xc0\xaa\x15\xdc\x27\x6b\xee\x57\xce\x99\xdc\x03\x30\xaf\x56\xb4\xd7\x53\xcf\x36\x88\x0b\xc7\x8f\x33\xc7\x45\xa8\x14\x0c\xbd\x8c\x74\x6b\xf5\xb4\xe1\x13\x84\xde\x36\x96\xb6\x0e\x08\xe5\x54\x58\x93\x7c\x1a\xac\xaa\xb9\x98\x69\x5a\xc9\x87\xb1\x19\x8d\x73\x0a\x53\x51\x7b\xf5\xb5\xec\xfb\xec\x7f\x8e\x9b\x78\x24\xc1\x8d\x3d\xfd\x9b\x18\xd5\xa8\xe0\xd8\xaf\xdb\x35\x7c\xbd\xbb\xa1\x87\x1f\xf0\xba\x6c\xa6\x69\x9c\xca\xdb\x66\x9d\xa4\x38\x35\xf3\x32\xd1\x87\x0d\xb9\xf1\xb3\xd5\xb5\x36\xf6\x4d\x86\x63\x81\x90\xb7\xca\x3b\x7d\x29\x57\x5b\xa8\x8f\x3e\x1d\xab\xd3\x73\xe3\xed\x24\x85\x53\x34\x78\x19\xff\x8c\x17\x0c\xb0\xbb\x65\xdf\xb2\x1d\xd2\x8f\xb3\x90\x62\x7b\xdc\x43\xde\xab\xfb\x1b\x00\x00\xff\xff\xe6\x9c\xe4\xc4\xa1\x02\x00\x00")

func squadronServicesExampleYmlBytes() ([]byte, error) {
	return bindataRead(
		_squadronServicesExampleYml,
		"squadron/services/example.yml",
	)
}

func squadronServicesExampleYml() (*asset, error) {
	bytes, err := squadronServicesExampleYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/services/example.yml", size: 673, mode: os.FileMode(420), modTime: time.Unix(1593591453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronServicesHelloServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xc1\x4e\x04\x21\x0c\x86\xef\xfb\x14\x7f\xd6\x8b\x1e\x1c\xcc\x1e\x79\x9b\x2e\x74\xa4\x11\x28\x16\x66\xa2\x6f\x6f\x04\x35\xde\x9a\x7e\xfd\xbe\x76\xb6\x53\x02\xfb\x0b\x70\x3f\x24\xc7\xef\x01\x90\x42\xaf\xec\xb1\xab\x16\x75\xfd\xfd\xa0\x68\x5a\x9f\x13\xe7\xac\x93\x07\x2d\x85\x6a\xf4\xb8\x46\x0d\x6f\x6c\xcb\x05\xb5\x96\x25\xd0\x10\xad\xee\x7a\x01\x42\x22\x1b\xab\x58\xa9\xb0\x07\x7f\x50\x69\x99\xe7\xc6\xb8\x69\x97\xa1\xf6\xe9\xb1\x4b\x66\xef\xdc\xf6\xf7\xcb\x4d\xb5\xbb\xff\xc2\x03\x1a\x8d\x84\xa1\x18\x89\x57\x1b\x51\x0c\xc6\x99\x86\x9c\xfc\x4b\xee\xd4\x79\x9d\x3e\xfe\xe8\xee\x69\x06\x4e\xb6\x2e\x5a\x3d\x5e\xb6\xdb\x76\xfb\x0a\x00\x00\xff\xff\xd9\x24\x72\x76\xfa\x00\x00\x00")

func squadronServicesHelloServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_squadronServicesHelloServiceYml,
		"squadron/services/hello-service.yml",
	)
}

func squadronServicesHelloServiceYml() (*asset, error) {
	bytes, err := squadronServicesHelloServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/services/hello-service.yml", size: 250, mode: os.FileMode(420), modTime: time.Unix(1593591453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squadronServicesHiServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xc1\x4e\x04\x21\x0c\x86\xef\xf3\x14\x7f\xd6\x8b\x1e\x1c\xcc\x1e\x79\x9b\x2e\x74\xa5\x11\x28\x16\x66\xa2\x6f\x6f\x04\x35\xde\x9a\x7e\xfd\xbe\x76\xb6\x53\x02\xfb\x0d\xb8\x1d\x92\xe3\xf7\x00\x48\xa1\x57\xf6\xb8\xab\x16\x75\xfd\xfd\xa0\x68\x5a\x9f\x93\x4c\x18\xb4\x14\xaa\xd1\xe3\x12\x35\xbc\xb1\x2d\x11\xd4\x5a\x96\x40\x43\xb4\xba\xcb\x06\x84\x44\x36\x56\xae\x52\x61\x0f\xfe\xa0\xd2\x32\xcf\x8d\x71\xd3\x2e\x43\xed\xd3\xe3\x2e\x99\xbd\x73\xfb\xdf\x23\x37\xd5\xee\xfe\x0b\x0f\x68\x34\x12\x86\x62\x24\x5e\x6d\x44\x31\x18\x67\x1a\x72\xf2\x2f\xb9\x51\xe7\x75\xfa\xf8\xa3\xbb\xa7\x19\x38\xd9\xba\x68\xf5\x78\xd9\xaf\xfb\x75\xfb\x0a\x00\x00\xff\xff\xdf\x00\x54\x52\xf8\x00\x00\x00")

func squadronServicesHiServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_squadronServicesHiServiceYml,
		"squadron/services/hi-service.yml",
	)
}

func squadronServicesHiServiceYml() (*asset, error) {
	bytes, err := squadronServicesHiServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squadron/services/hi-service.yml", size: 248, mode: os.FileMode(420), modTime: time.Unix(1593591453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"application/Dockerfile":                                       applicationDockerfile,
	"application/hello.go":                                         applicationHelloGo,
	"squadron/.gitignore":                                          squadronGitignore,
	"squadron/charts/example/.helmignore":                          squadronChartsExampleHelmignore,
	"squadron/charts/example/Chart.yaml":                           squadronChartsExampleChartYaml,
	"squadron/charts/example/templates/_helpers.tpl":               squadronChartsExampleTemplates_helpersTpl,
	"squadron/charts/example/templates/deployment.yaml":            squadronChartsExampleTemplatesDeploymentYaml,
	"squadron/charts/example/templates/ingress.yaml":               squadronChartsExampleTemplatesIngressYaml,
	"squadron/charts/example/templates/service.yaml":               squadronChartsExampleTemplatesServiceYaml,
	"squadron/charts/example/templates/tests/test-connection.yaml": squadronChartsExampleTemplatesTestsTestConnectionYaml,
	"squadron/charts/example/values.yaml":                          squadronChartsExampleValuesYaml,
	"squadron/namespaces/local/hello-squadron.yml":                 squadronNamespacesLocalHelloSquadronYml,
	"squadron/services/example.yml":                                squadronServicesExampleYml,
	"squadron/services/hello-service.yml":                          squadronServicesHelloServiceYml,
	"squadron/services/hi-service.yml":                             squadronServicesHiServiceYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"application": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{applicationDockerfile, map[string]*bintree{}},
		"hello.go":   &bintree{applicationHelloGo, map[string]*bintree{}},
	}},
	"squadron": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{squadronGitignore, map[string]*bintree{}},
		"charts": &bintree{nil, map[string]*bintree{
			"example": &bintree{nil, map[string]*bintree{
				".helmignore": &bintree{squadronChartsExampleHelmignore, map[string]*bintree{}},
				"Chart.yaml":  &bintree{squadronChartsExampleChartYaml, map[string]*bintree{}},
				"templates": &bintree{nil, map[string]*bintree{
					"_helpers.tpl":    &bintree{squadronChartsExampleTemplates_helpersTpl, map[string]*bintree{}},
					"deployment.yaml": &bintree{squadronChartsExampleTemplatesDeploymentYaml, map[string]*bintree{}},
					"ingress.yaml":    &bintree{squadronChartsExampleTemplatesIngressYaml, map[string]*bintree{}},
					"service.yaml":    &bintree{squadronChartsExampleTemplatesServiceYaml, map[string]*bintree{}},
					"tests": &bintree{nil, map[string]*bintree{
						"test-connection.yaml": &bintree{squadronChartsExampleTemplatesTestsTestConnectionYaml, map[string]*bintree{}},
					}},
				}},
				"values.yaml": &bintree{squadronChartsExampleValuesYaml, map[string]*bintree{}},
			}},
		}},
		"namespaces": &bintree{nil, map[string]*bintree{
			"local": &bintree{nil, map[string]*bintree{
				"hello-squadron.yml": &bintree{squadronNamespacesLocalHelloSquadronYml, map[string]*bintree{}},
			}},
		}},
		"services": &bintree{nil, map[string]*bintree{
			"example.yml":       &bintree{squadronServicesExampleYml, map[string]*bintree{}},
			"hello-service.yml": &bintree{squadronServicesHelloServiceYml, map[string]*bintree{}},
			"hi-service.yml":    &bintree{squadronServicesHiServiceYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
