// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package exampledata generated by go-bindata.// sources:
// example/application/Dockerfile
// example/application/hello.go
// example/configurd/.gitignore
// example/configurd/charts/example/.helmignore
// example/configurd/charts/example/Chart.yaml
// example/configurd/charts/example/templates/_helpers.tpl
// example/configurd/charts/example/templates/deployment.yaml
// example/configurd/charts/example/templates/ingress.yaml
// example/configurd/charts/example/templates/service.yaml
// example/configurd/charts/example/templates/tests/test-connection.yaml
// example/configurd/charts/example/values.yaml
// example/configurd/namespaces/local/hello-group.yml
// example/configurd/services/hello-service.yml
// example/configurd/services/hi-service.yml
package exampledata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _applicationDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x4a\xcc\x29\xc8\xcc\x4b\x55\x70\x0c\x56\x48\x2a\xcd\xcc\x49\x49\x2d\xe2\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\xe2\x0a\x0a\xf5\x53\x48\xcf\x87\xc8\x28\xe8\xe6\x2b\xe8\x67\xa4\xe6\xe4\xe4\x83\x64\xc0\x46\x40\xf4\x5a\xe5\x24\x96\xa4\x16\x97\x40\xf5\xe9\xea\xa6\x15\xe5\xe7\xda\x42\x0d\x83\xe9\x80\x50\x5c\x5c\xae\x7e\x21\x41\x91\x01\xfe\x9e\x7e\x21\x0a\xd1\x4a\x10\x41\xa5\x58\x40\x00\x00\x00\xff\xff\x8e\x35\x03\xdb\x8f\x00\x00\x00")

func applicationDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_applicationDockerfile,
		"application/Dockerfile",
	)
}

func applicationDockerfile() (*asset, error) {
	bytes, err := applicationDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application/Dockerfile", size: 143, mode: os.FileMode(420), modTime: time.Unix(1583934394, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _applicationHelloGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xb1\x4e\x03\x31\x0c\x9d\xe3\xaf\xb0\x32\x25\xd5\xe9\x60\x44\x95\x3a\x74\xa0\x74\xa8\x04\xa2\x03\x03\x42\x55\xe8\xb9\x69\x44\x9a\x3b\x12\x97\x0a\xa1\xfe\x3b\x4a\x2e\x45\x95\x98\x6c\x3f\x3f\x3f\xdb\x6f\x30\xdb\x0f\x63\x09\x0f\xc6\x05\x00\x77\x18\xfa\xc8\xa8\x40\xc8\x9d\x37\x56\x82\x90\xbe\x2f\x21\x10\xdf\xec\x99\x07\x09\x1a\x60\x77\x0c\xdb\x32\xa1\x34\xfe\x80\xc8\xd4\x79\xd7\x45\x4a\x09\xa7\x33\xcc\x65\xbb\xe6\xe8\x82\x55\xd2\x8c\xb8\x6c\x50\x4e\xef\x6e\x73\xa8\x08\x72\x8f\xde\x25\xa6\x90\x33\xa9\x47\x99\x87\x48\xc4\x2e\xd8\x7f\x3a\xb6\x36\xb2\xc2\xf2\x7e\xb5\x7a\xcc\x49\x22\x4e\xc8\x7b\xc2\x4b\x17\x0f\x94\x92\xb1\x74\x91\x6b\x9f\x4c\x4c\xa4\x34\x80\xb0\x57\xca\xaf\x6f\xef\xdf\x4c\x6a\x72\xbd\x31\x73\xf6\x26\x74\x9e\x62\xa6\xe4\x5f\xdb\xe5\x58\x2f\x8e\x61\xab\xf2\xcf\xea\x34\xe2\xcf\x94\x86\x3e\x24\x7a\x89\x8e\x29\x36\x18\x71\x52\xf1\xcf\x23\x25\x2e\xa6\x88\x4d\x83\x1b\x9c\xe1\xa9\x2d\x2c\x65\xff\xf6\x88\x73\xde\xe5\x7b\xdb\x2e\x0c\x1b\xaf\xca\xe8\xaa\x58\x31\x0f\xdd\x9a\xe2\x57\x3d\xad\x7a\xda\x60\xbd\x4b\x6b\x38\xc3\x6f\x00\x00\x00\xff\xff\xff\x16\x4b\x76\xb1\x01\x00\x00")

func applicationHelloGoBytes() ([]byte, error) {
	return bindataRead(
		_applicationHelloGo,
		"application/hello.go",
	)
}

func applicationHelloGo() (*asset, error) {
	bytes, err := applicationHelloGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application/hello.go", size: 433, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x2b\xcf\x2f\xca\x4e\xc9\x2c\x02\x04\x00\x00\xff\xff\x88\x9c\x6c\x73\x08\x00\x00\x00")

func configurdGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_configurdGitignore,
		"configurd/.gitignore",
	)
}

func configurdGitignore() (*asset, error) {
	bytes, err := configurdGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/.gitignore", size: 8, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleHelmignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x23\x31\x0c\x86\xef\x7a\x8a\x7f\x99\xcb\xee\xb0\x78\x1e\x22\xd9\xc3\x9e\x5a\x48\xc9\xb5\x78\x66\x14\x5b\x89\xc7\x36\x96\x26\x69\x7b\xe8\xb3\x97\x24\x84\xf6\xf2\x81\x3e\x24\xf1\x75\x78\xf6\x66\xdc\xb2\xc2\x0a\x24\xe4\xd2\x18\x97\xc8\x19\xe3\x2a\x69\x96\x1c\x50\xfd\x74\xf2\x81\xd5\x51\x87\x97\x28\x0a\x5d\x6b\x2d\xcd\x14\x1a\x39\x25\x84\x54\x46\x2c\xde\xa6\x28\x39\xfc\x45\xe3\xe4\x4d\xce\x8c\xea\x2d\xfe\xf0\x3e\xcf\xd4\x21\x73\xf0\x26\x25\xe3\x77\x6d\x7c\x90\x37\x9e\x71\x11\x8b\xf8\xf5\xc7\xe1\x29\xa7\x77\x94\x7c\xbb\xbc\x26\xa1\x72\x43\x92\xcc\x8e\xdc\x76\xf7\xba\xb3\xd2\x98\x3a\x6c\xca\xb2\x94\x8c\xfd\x66\x87\x59\x9a\x92\x0b\x62\xc3\x8d\xf7\x7c\x72\xe3\x47\x1b\x6e\x7c\x88\x18\x86\x2b\x1e\xa3\x9e\xf3\xf0\xfd\x68\xf4\xd3\x69\xad\x38\x48\x62\xa5\xde\xe9\xa5\x52\xef\x46\x7f\xa2\xde\xd9\x52\xa9\xff\xa4\x0e\x7b\xdf\xa4\xac\x8a\xff\xdb\x7f\x4a\xae\xb6\x72\xe4\xc9\xc8\xc9\xcc\x7e\xb8\xef\xb5\x72\x24\x77\xd6\xa9\xcc\x3c\xd0\x57\x00\x00\x00\xff\xff\xf5\x89\xaa\x2d\x56\x01\x00\x00")

func configurdChartsExampleHelmignoreBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleHelmignore,
		"configurd/charts/example/.helmignore",
	)
}

func configurdChartsExampleHelmignore() (*asset, error) {
	bytes, err := configurdChartsExampleHelmignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/.helmignore", size: 342, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleChartYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\x4a\x2c\x28\x80\x73\x95\x0c\xf5\x0c\x94\xb8\x52\x52\x8b\x93\x8b\x32\x0b\x4a\xc0\x42\x8e\x79\x0a\xae\x15\x89\xb9\x05\x39\xa9\x0a\xce\x19\x89\x45\x25\x0a\x69\xf9\x45\x0a\xce\xf9\x79\x69\x99\xe9\xa5\x45\x29\x5c\x79\x89\xb9\xa9\x56\x0a\xa9\x10\x15\x5c\x65\x30\x83\x0c\xf4\x0c\xf5\x0c\xb8\x00\x01\x00\x00\xff\xff\xe2\x6b\xa4\x38\x6a\x00\x00\x00")

func configurdChartsExampleChartYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleChartYaml,
		"configurd/charts/example/Chart.yaml",
	)
}

func configurdChartsExampleChartYaml() (*asset, error) {
	bytes, err := configurdChartsExampleChartYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/Chart.yaml", size: 106, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplates_helpersTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x0f\xd1\x40\x9b\xb2\xce\xa1\xd0\xc3\x42\x4e\x69\x0f\xa5\x90\x42\x03\xe9\xb1\xc8\xf6\xa8\x3b\x20\xcb\xae\x46\xda\xee\x92\xe4\xbf\x17\x49\x8e\x77\xb7\xe0\xb2\x7b\x1b\xac\xa7\x37\x6f\xbe\x91\x9f\x9e\x6e\xae\xb1\xe5\x7e\x0d\xa1\x00\xc3\x96\xc2\x7e\xa4\xdb\x3e\x4a\xd0\xed\x86\xd6\xb8\xbe\x79\x79\xa9\x92\xaa\xfa\xbc\x1b\xb5\xeb\x10\x36\x04\xa7\x7b\xc2\x60\x72\xdd\x6e\xb4\x0f\x75\x35\xe9\x56\xe8\xc8\xb0\x23\x28\xda\xe9\x7e\xb4\x54\x27\xad\xc2\xea\x70\xaa\xa3\x0d\xa8\xef\xf2\xb5\xfb\x64\x54\x3f\x6a\x1b\x49\xb2\xf2\xdb\x96\xbc\xe7\x8e\xf0\x8c\xe0\xa3\x6b\xf1\xf1\x43\x2e\xb9\x7f\x88\xc6\xf0\x0e\x6a\x75\x30\x23\xd7\xe5\xba\xe4\xbb\xf3\xa4\x03\x41\xcf\x3d\x4c\xb4\x76\x8f\xdf\x51\x5b\x36\x4c\x1d\xf4\x38\xe6\xe4\x75\xf5\x83\x8a\x7b\xd6\x87\xd4\x23\x4d\x21\x68\xa8\xd5\x51\x08\x32\xf4\x84\xaf\xb1\x21\xef\x28\x90\x94\x79\x0d\x93\xed\x04\xda\x13\x2c\xf7\x1c\xa8\x43\x18\x10\x36\x2c\x78\xdb\xec\x33\x8b\x4f\xf7\x0f\x49\xcb\xee\x17\x64\xa4\xf6\x5d\x5d\x7d\x31\xf0\x64\x49\xcb\x04\xad\x1d\x5c\xd0\xec\xa4\x60\x2b\xdf\x38\xe0\x0f\x5b\x8b\x86\x10\x25\xe5\x14\xe8\x1c\x7e\x4a\xbb\x88\x36\x69\x4e\xf1\xb2\x99\x69\xbe\x1e\xce\x44\x5f\x35\x8b\x82\xb3\x90\x5b\x39\x38\xbd\xc9\xf1\xd7\xb7\xe7\x6f\xf5\x28\xe7\x4c\xa2\xb8\xd4\xdf\x0b\xa6\x72\x79\xce\x7a\xf2\xf5\xe2\x80\xa3\x67\x17\x0c\xd4\x95\xac\xae\x44\xfd\xe3\x56\xfa\x5e\xf2\xce\x96\xea\x93\xf7\x77\xb4\xd8\xf4\xbb\x6c\xc9\x0b\x0f\x2e\x2d\x35\x2f\x77\x7a\x29\x45\x65\x75\x43\xf6\x3f\x0b\xce\x2a\xb5\x38\xce\x31\xed\x52\x3f\x4e\xdd\x9e\xe1\x69\xb4\xba\x25\xa8\xf7\x0a\xea\xa7\xba\x68\xce\xbf\x01\x00\x00\xff\xff\xef\x62\xa1\x95\x15\x04\x00\x00")

func configurdChartsExampleTemplates_helpersTplBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplates_helpersTpl,
		"configurd/charts/example/templates/_helpers.tpl",
	)
}

func configurdChartsExampleTemplates_helpersTpl() (*asset, error) {
	bytes, err := configurdChartsExampleTemplates_helpersTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/_helpers.tpl", size: 1045, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x23\xee\x09\xda\x9e\xaa\x5c\xb7\xc7\xaa\x42\x4b\xb5\x52\x8f\x83\x33\x10\x0b\xc7\x63\xd9\x93\x54\x88\xf2\xef\x95\x09\x64\xed\x85\x94\x2e\xda\xdc\x32\x7e\x33\xef\xf9\x3d\xdb\xe8\xf4\x2b\xf9\xa0\xd9\x56\x80\xce\x85\x45\xff\x34\xdb\x69\x5b\x57\xf0\x8d\x9c\xe1\x7d\x4b\x56\x66\x2d\x09\xd6\x28\x58\xcd\x00\x2c\xb6\x54\xc1\xfc\x70\x80\xf2\x85\x0c\x61\xa0\xf2\x07\xb6\x04\xc7\x63\x51\x8f\x1d\xf3\x19\x80\xc1\x35\x99\x10\x5b\x20\x4e\x2e\x77\xdd\x9a\xbc\x25\xa1\x50\x6a\x5e\x0c\x63\x6e\x4c\x99\xc0\x3b\xf4\x52\xf0\x66\x68\x79\x45\xd3\x51\x28\xb7\x9e\x3b\x37\xdd\xd2\xa2\xc5\x2d\xd5\xc5\x7a\x9f\x13\xad\xc8\xf7\x5a\x8d\x5c\x0d\x99\xb6\x0c\xcd\x42\x35\xe8\x65\x62\x67\x69\xed\x85\x7a\x1d\xfd\x82\xe3\x71\x3e\x0b\x8e\x54\xdc\xa2\x27\x67\xb4\xc2\x90\xe9\x3b\x17\x9f\xb9\xb3\x32\xb0\x05\x32\xa4\x84\xfd\xe0\x4a\x8b\xa2\x9a\xef\x89\x4d\x1f\x37\xea\x01\xab\x84\x5a\x67\x50\xe8\xac\x21\x89\x36\x7e\x26\x93\xf3\x88\xa0\x87\xd2\xbb\xf8\x18\x3f\xc5\x56\x50\x5b\xf2\x89\x8c\x02\xee\xd3\x02\xe8\x16\xb7\x94\x91\x9c\x2a\x31\x08\x0e\x5a\xd8\xef\x6f\xe0\x97\x9d\x31\x4b\x36\x5a\xed\x6f\x74\xba\x71\x31\xef\x3c\x1c\x0a\xf8\xad\xa5\x19\xe1\xe8\xb7\x21\x87\xc4\x4a\x95\xfc\x0f\x4d\xc2\xbf\xb0\x35\x50\xc2\x1f\xb0\xda\xd6\x64\x05\x9e\xbe\x5c\xcf\x26\x5b\xdf\x21\x24\xdb\xe7\x08\xb2\xfd\xe7\xd1\x39\xf6\xf2\x4e\xfd\x25\x82\x31\x9e\x22\x82\x32\x48\x92\xdd\x92\xe3\x65\x4a\xfc\x0c\xc3\xad\x2b\x33\x44\x4e\x7a\x22\xf6\x2c\xac\xd8\x54\xf0\xf3\x79\x99\xac\x19\xdd\x93\xa5\x10\x96\x9e\xd7\x94\x0b\x13\xe5\x56\xac\x76\x24\xd5\xfb\x59\x27\x0d\x93\x7a\x3d\x61\xad\x3f\x7d\x66\xe0\xce\x2b\xfa\x47\xf2\xe3\xe3\x70\x46\x4e\x44\x73\x15\xb8\xe5\x9a\x56\xe7\xf7\xe3\x0d\x96\x56\xdf\x38\x27\xa2\xff\x9a\x8f\x4f\x52\xbf\x3e\xcf\x9b\x8d\xb6\x5a\x92\x63\x7f\xa9\xfc\x3f\xcb\x3d\x0e\x61\x43\x1e\x45\xb3\x4d\xae\x4e\x52\x7c\x88\xe9\x6f\x00\x00\x00\xff\xff\x92\x6e\xb6\x5b\xd1\x06\x00\x00")

func configurdChartsExampleTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplatesDeploymentYaml,
		"configurd/charts/example/templates/deployment.yaml",
	)
}

func configurdChartsExampleTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := configurdChartsExampleTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/deployment.yaml", size: 1745, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplatesIngressYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x8e\xe2\x30\x0c\xbd\xf7\x2b\x2c\xee\x0d\x42\xda\x53\xff\x60\x2f\x68\xc5\x4a\x48\x7b\x74\x5b\x43\x23\x5a\x27\x4a\x5c\x76\x46\x9d\xfe\xfb\xc8\xd3\x32\x34\x50\x86\x13\x7e\x7d\x7e\x2f\x7e\xf6\x30\xe4\x60\x4f\x80\x5c\x83\x39\x62\xdb\x53\x34\x96\xcf\x81\x62\x34\x8d\x8b\xf2\x04\x7a\x94\x06\xc6\x31\x43\x6f\x8f\x14\xa2\x75\x5c\x00\xbd\x09\xb1\xfe\x8d\xdb\xeb\xae\x24\xc1\x5d\x76\xb1\x5c\x17\xf0\x7b\x6a\xca\x3a\x12\xac\x51\xb0\xc8\x00\x18\x3b\x2a\x60\x33\x0c\x60\x0e\xd4\x12\x46\x32\x7b\xec\x08\xc6\x31\x9f\x3d\x36\x19\x40\x8b\x25\xb5\x51\xf9\x00\xe8\xbd\xb9\xf4\x25\x05\x26\xd1\x97\xb8\xed\xa4\xb1\x22\xf1\x82\xef\x31\x48\xee\x4e\x53\xcb\x3c\xd0\x39\xb8\xde\xbf\x6e\xe9\x90\xf1\x4c\x75\x5e\xbe\xa7\x46\x7f\x29\x5c\x6d\xf5\xed\xd5\x50\xdb\x99\xd8\x6c\xab\x06\x83\xbc\x18\x6b\x89\x1d\xe8\x6a\x35\x29\x18\x47\x1d\x53\xd3\xff\x6f\xa5\x79\x8a\x19\x99\x9d\xa0\x68\xa6\x93\xd5\x02\x98\x52\xd1\x56\x71\xff\xb0\x6b\xc1\xc0\x07\xb0\xe5\x9a\x58\xe0\xd7\x44\xd7\xaf\xc4\xb5\x16\xd1\x53\x55\x64\xf3\x9e\x1f\x7d\x22\x55\x81\xe4\x9e\x9e\xdc\x42\xcf\x41\xd7\x3f\x17\x5a\x2e\xa2\x4b\x0e\x64\x0e\x02\xe0\x2e\x55\xac\x91\x53\xa7\xc5\xfb\x00\x42\xdf\x52\x62\xbb\x2a\x90\xba\x35\x22\xfe\xf6\x38\x00\xbd\xca\x78\x2f\x55\x47\xa1\x55\x9d\xdb\x05\xc3\xe2\x57\x62\x75\x21\xae\x8b\x04\xd4\x91\xbe\x96\xbd\xff\xf1\xdc\x9e\xe8\x7f\x5c\x48\x27\x98\x71\x53\x39\x16\xb4\x4c\x41\x19\x0f\x29\x7c\x06\x00\x00\xff\xff\x94\xce\x63\x51\x88\x03\x00\x00")

func configurdChartsExampleTemplatesIngressYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplatesIngressYaml,
		"configurd/charts/example/templates/ingress.yaml",
	)
}

func configurdChartsExampleTemplatesIngressYaml() (*asset, error) {
	bytes, err := configurdChartsExampleTemplatesIngressYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/ingress.yaml", size: 904, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x31\x6b\xc3\x30\x10\x46\x77\xfd\x8a\x23\xbb\x15\xba\x6a\xed\x5e\x42\x5a\xb2\x9f\xe5\xaf\xb1\x88\x2c\x89\xd3\xd9\x10\x82\xff\x7b\x71\x9d\x40\x03\x6e\x87\x8e\x92\xde\x43\xf7\x8e\x4b\x38\x41\x6a\xc8\xc9\xd1\xf4\x62\x2e\x21\x75\x8e\xde\x21\x53\xf0\x30\x03\x94\x3b\x56\x76\x86\x28\xf1\x00\x47\xb7\x1b\xd9\x23\x22\xb8\xc2\xbe\xf1\x00\x9a\x67\x43\x14\xb9\x45\xac\x0b\x45\xc4\xa5\xd8\xcb\xd8\x42\x12\x14\xd5\x86\xbc\xff\xcb\xdc\xe2\x0b\x8b\x36\xf9\x73\x55\x4e\x1c\x47\x54\x7b\x96\x3c\x96\xdf\x95\x81\x13\x9f\xd1\x35\xed\xf5\xf9\xa3\x7b\xc8\x43\xec\x11\x07\x5b\xfb\xbd\xef\x59\xd4\xd1\x6e\x63\xa6\xe6\xe7\xdd\x11\x53\x58\x56\x43\xf3\xbc\x33\xb5\xc0\x2f\x89\x15\x11\x5e\xb3\xfc\x27\x57\xaf\x05\x4f\x5d\x75\x1d\xd0\x2e\x0f\x2b\x52\xb2\xe8\x7d\x95\xcd\xf7\x61\x93\xf7\x39\x29\x87\x04\x39\x64\xd1\x47\x1e\x51\x91\xac\xd9\xe7\xe8\xe8\xe3\xf5\x60\xbe\x02\x00\x00\xff\xff\x0a\x95\xdd\xf0\xdc\x01\x00\x00")

func configurdChartsExampleTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplatesServiceYaml,
		"configurd/charts/example/templates/service.yaml",
	)
}

func configurdChartsExampleTemplatesServiceYaml() (*asset, error) {
	bytes, err := configurdChartsExampleTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/service.yaml", size: 476, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplatesTestsTestConnectionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x91\x4b\x4f\x71\xd9\xd5\x0f\x51\xca\x06\xbd\x94\x1d\x14\x47\x4b\x4c\x6d\x39\x58\x4a\xd7\x52\xf2\xee\xc3\x69\xc6\x36\xd6\xb1\xeb\x2f\x7d\xbf\xf4\x4b\x38\xfa\x03\x65\xf1\x89\x2d\x9c\x9f\xaa\x93\xe7\xce\xc2\x3e\x75\x55\x24\xc5\x0e\x15\x6d\x05\xc0\x18\xc9\x42\x7d\xbb\x81\x67\x17\xa6\x8e\xa0\xa6\x0b\xc6\x31\x90\x79\x9b\x42\x28\xe5\x1a\x0c\xcc\x73\xa3\x24\xda\xb8\xc4\x4c\x4e\x7d\xe2\xba\x02\x08\xd8\x52\x90\x62\x03\x80\xe3\x68\x4e\x53\x4b\x99\x49\x49\x8c\x4f\xdb\xbb\xf5\x23\xe7\x2f\xd7\x05\x1d\x28\x44\x23\xc3\xd6\x0d\x98\xf5\x31\xb1\x94\xbe\x21\xbf\xa7\x79\x16\x45\x76\xf7\x89\xe6\x99\x02\xa1\x90\xd9\x61\xa4\xbf\x99\x88\x8c\x3d\x75\x4d\x7b\xfd\x49\xbd\x50\x3e\x7b\xb7\x82\xc8\x9c\x14\x4b\xe4\x35\x69\xfd\xb9\xef\x90\xd2\xa9\xb6\xb0\x1c\x46\x26\xe7\x48\xa4\x92\x91\x5c\x69\x73\x89\x15\x3d\x53\x5e\xa1\x66\xbd\xf4\x7b\x4f\xba\x08\x00\x3e\x62\x4f\x16\xda\x49\xae\x6d\xba\xac\xa2\x4b\x31\x62\x79\xd4\x71\x53\x5a\x37\xaf\xab\x8e\xb9\x17\x0b\x70\xdc\xfc\xff\x29\x5b\xa2\x1c\x30\x4c\x24\x46\xee\x49\xcc\x98\xb2\xc2\x3c\x2f\x76\x99\x44\x31\xeb\x3e\x05\xef\xae\x16\x76\x74\xa6\x5c\x7d\x04\x00\x00\xff\xff\xc5\xf1\x40\xab\x2d\x02\x00\x00")

func configurdChartsExampleTemplatesTestsTestConnectionYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplatesTestsTestConnectionYaml,
		"configurd/charts/example/templates/tests/test-connection.yaml",
	)
}

func configurdChartsExampleTemplatesTestsTestConnectionYaml() (*asset, error) {
	bytes, err := configurdChartsExampleTemplatesTestsTestConnectionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/tests/test-connection.yaml", size: 557, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdc\x46\x0c\xbd\xcf\xaf\x20\xd6\x87\x5c\xec\xad\x9d\x5e\x02\x01\x39\x18\x4e\x5b\x18\xb0\x9d\x45\xd7\x45\x51\x04\x39\xcc\x8e\x28\x69\xda\x11\xa9\x92\x9c\x75\x84\xa2\xff\xbd\x98\x91\xfc\xd1\x38\x87\x9c\x76\x76\xf4\xc8\x79\x7c\x7c\xe4\x09\x7c\xc0\xce\xe7\x64\x70\xf4\x29\xa3\x42\xc7\x02\x86\x6a\x5b\x77\x02\xf7\x43\x54\x88\x0a\x1e\xfe\xb8\xbc\xbd\x39\xeb\x58\x46\x6f\x86\x2d\x74\x31\x61\x01\x7c\xc0\x90\xbc\x20\x1c\xbd\x44\x7f\x48\xa8\x60\x0c\x07\x84\xc9\xab\x62\x0b\x91\x8c\x61\xe6\x5c\x32\x8e\x53\xf2\x86\xba\x75\x4e\x70\x4a\x31\xf8\x2b\xce\x64\x0d\x5c\x38\x17\x47\xdf\x63\xe3\x00\x04\x27\xd6\x68\x2c\x73\x03\xd4\x47\xfa\xe2\x00\xa6\x9c\xd2\x8e\x53\x0c\x73\x03\xd7\xdd\x1d\xdb\x4e\x50\x91\x6c\x0d\xdb\xe5\x94\xf6\x18\x04\x4d\x1b\xf8\xf4\xd9\x91\x1f\xf1\xe3\x11\x45\x62\x8b\x0d\x6c\x36\xae\xcb\x29\xbd\xba\x74\x8a\x72\x8c\x01\x2f\x43\xa8\x2c\x1c\xc0\x09\xec\x27\x0c\xb1\x8b\xa8\xf0\x30\xa0\x0d\x28\xe0\x61\xc5\x81\x5f\x80\xa0\x03\xe7\xd4\x96\x12\x83\xa0\x37\x6c\x1d\xac\xa7\x06\x4c\x32\xd6\x44\x97\x44\x6c\xde\x22\x53\xd5\xc3\xb7\x6d\xf9\xb1\x01\xbf\x4e\xe7\x00\xfc\x33\xb6\x81\x7f\xfe\xad\xf1\xf7\x03\x42\xa1\x0c\xdc\x7d\x2b\xaa\x24\xcb\x8a\xdb\x8a\xbd\xee\x80\xd8\x40\xd1\xc0\x53\xbb\x72\x29\x3d\x2b\x6c\x4e\xc1\x2f\x89\xa2\x42\x8f\x84\x52\x18\x43\xd6\x48\x7d\x4d\xfc\xa8\xcd\x53\x7b\x1c\x54\x7c\xe3\xdc\xc4\xed\x1e\x43\x96\x68\xf3\x15\x93\xe1\x17\x7b\xa2\xd7\xe9\x2f\xc2\x79\x6a\xe0\xed\xf9\xf9\x79\x91\xf2\xdb\xb0\xe0\x27\x7f\x88\x29\x5a\x44\x5d\x04\x06\x68\x85\xa7\xc7\xf3\x19\x5c\xde\xdc\xd4\xb3\xa0\x6f\x3f\x52\x9a\x7f\x65\xb6\x9f\x63\x42\x9d\xd5\x70\x7c\x21\xa8\x64\xba\xd4\x3b\xa6\x02\xf8\xfa\xfa\x37\x45\x69\xe0\x62\xa5\x52\x85\x2a\x2f\xd8\x3c\x61\x03\x57\x29\xab\xa1\x5c\xef\x8a\x91\x58\xac\x81\x77\xe7\xa5\x63\x4c\xe6\x23\xa1\xec\xea\xdd\x8f\x35\xb8\x5f\x8a\x2a\xde\x77\x0e\xe9\x58\xed\x54\x9e\x39\x5b\x34\x81\xfb\x9f\xf6\xf7\x2b\xf7\x3a\x2b\x0d\x6c\x0a\x78\xe3\x9c\x97\x5e\x5f\xc0\x37\x5e\xfa\x8b\xf7\xef\x99\x70\xe3\x9c\x8b\xd4\x0b\x6a\x95\xe0\x75\xb3\x4b\xc0\x5f\xf9\x80\x42\x58\x86\x23\xf2\x0f\x2b\x7c\x1b\x92\x57\x7d\x1e\x83\xd7\x40\x4b\x7a\xe6\xc3\x58\x69\x48\xc6\x8d\x03\x18\x58\xad\xfa\x1b\x60\xf2\x36\xac\x47\xad\xe3\x71\x57\x6b\x28\xde\x17\x54\xce\x12\xf0\xd9\x70\xbf\x23\x64\xcd\x3e\xa5\x19\x04\x03\x8f\x23\x52\x5b\x6d\x65\x0c\x5a\xa7\x62\x86\x76\x5d\x13\x4f\xd1\xd5\x6f\xc6\x90\xd0\x1f\x11\xac\xac\x0a\x5f\x56\x45\x60\xd2\x10\x39\xeb\xe2\x82\x81\x8b\x75\xeb\x56\x19\xca\x33\x28\xdb\x65\xaf\xf8\xa4\x0c\x91\x8a\x63\x15\x15\xc2\xe0\x29\x2c\xbf\x62\x5a\x7a\x0b\x4c\x80\x74\x8c\xc2\x34\x22\x99\xc2\x43\xb4\x01\x52\x34\x4b\x6b\xff\x1f\xa9\x9c\x82\xe6\x30\x94\xe7\x6f\x23\xc5\x22\xd3\xb6\x0c\xc6\xcc\x19\x5a\x86\x07\x4f\xff\xab\xe4\x45\x58\xa6\xa5\x5a\x5b\xc6\x81\x53\xe2\x87\x48\x7d\xcd\x9e\x22\x15\x88\x6f\xff\xcc\x5a\xbf\x8f\xe5\x01\xc2\x80\xaa\x5e\xe6\xd3\x5a\xbf\xe0\xc8\xb5\x7a\x84\x90\x25\xcd\x70\x10\x5f\xb5\xe9\x0c\x05\xde\x3c\x4b\xfd\x66\xbb\x26\x1d\xa3\x3d\x8d\x43\x98\x72\xb5\xee\xb8\xfe\x1f\x71\xac\xbb\xef\xe2\xed\xbb\xdb\xb8\x96\xf8\x77\x46\xfd\xde\x08\x47\xdc\xe2\x1e\x13\x06\x63\xa9\xdd\x75\xc6\xa9\x8c\xfd\x62\xb9\x4f\x9f\x9d\xf3\x5d\x17\x29\xda\x5c\x3f\xff\x17\x00\x00\xff\xff\xa4\x52\x77\x19\xfe\x05\x00\x00")

func configurdChartsExampleValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleValuesYaml,
		"configurd/charts/example/values.yaml",
	)
}

func configurdChartsExampleValuesYaml() (*asset, error) {
	bytes, err := configurdChartsExampleValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/values.yaml", size: 1534, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdNamespacesLocalHelloGroupYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x50\xc1\xaa\xc3\x30\x0c\xbb\xbf\xaf\x30\xbd\x87\xbe\xe3\x08\xec\x1f\xf6\x0b\x69\x6b\x12\x8f\x10\x17\xc7\xed\xf7\x8f\x6c\xeb\x48\x33\xe8\x65\x6c\x3e\x39\x92\x91\x14\x79\xe1\x65\xb6\x7f\x00\x19\x65\xa5\x11\x73\xd9\x01\x02\xc6\xc8\xe6\x89\x3d\x20\x00\x5e\x51\x84\xa6\xed\xa6\x8c\x13\x5f\xbd\x00\x0c\x74\xc6\x78\x41\x54\x4a\xfe\x1c\x30\x60\xf7\x62\x1b\xb5\x32\x23\x27\x75\x94\x50\x2e\x2c\x6a\xe1\xf4\x5f\x71\x73\x0b\x51\xf2\x82\x79\x67\x37\x3b\x0d\x16\xfa\x2d\x7b\x7f\x8f\x5d\xf1\x81\xb3\x5a\x88\x3c\xba\x58\xd6\x8a\xc1\xe4\x86\x88\x93\x05\x95\x05\x1b\xc5\x9d\x45\xf9\xd3\xb1\xc1\xdb\xf9\xde\x2f\xd0\xe7\x3d\x3a\xfa\x6d\x8d\xf4\xd5\x0e\x5b\xf5\xc3\x02\xaf\x3c\x64\x7b\x0b\x00\x00\xff\xff\xe8\xe0\x68\x40\xa6\x02\x00\x00")

func configurdNamespacesLocalHelloGroupYmlBytes() ([]byte, error) {
	return bindataRead(
		_configurdNamespacesLocalHelloGroupYml,
		"configurd/namespaces/local/hello-group.yml",
	)
}

func configurdNamespacesLocalHelloGroupYml() (*asset, error) {
	bytes, err := configurdNamespacesLocalHelloGroupYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/namespaces/local/hello-group.yml", size: 678, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdServicesHelloServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x41\x0e\xc2\x30\x0c\x44\xd1\x7d\x4e\x31\xea\x1e\x75\x9f\xdb\x18\xc7\x6d\x2d\xec\x4c\x14\x5a\xc4\xf1\x11\xb0\xfb\xd2\x7f\x4f\x9b\x2f\x57\xab\x05\xb8\x5f\x1e\xed\x1b\x80\x32\x53\x7a\xab\x58\x1a\xf5\x61\xf3\xff\x20\x63\x84\xab\x9c\xce\xbe\x2e\x3f\xe8\x29\xbb\x55\x6c\x64\x72\x55\xf6\xcd\xf7\x6b\xb6\xdb\x61\x11\x2c\x80\x1e\x32\xcf\x0a\x7b\x4b\x8e\xb0\xf2\x09\x00\x00\xff\xff\xbb\xf1\x04\xaf\x6d\x00\x00\x00")

func configurdServicesHelloServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_configurdServicesHelloServiceYml,
		"configurd/services/hello-service.yml",
	)
}

func configurdServicesHelloServiceYml() (*asset, error) {
	bytes, err := configurdServicesHelloServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/services/hello-service.yml", size: 109, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdServicesHiServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x41\x0e\xc2\x40\x08\x46\xe1\xfd\x9c\xe2\x4f\xf7\xa6\x7b\x6e\x83\x40\x5b\xe2\x30\x4c\xb0\x35\x1e\xdf\xa8\xbb\x97\xbc\xef\x69\xf5\x72\x31\x6a\xc0\xfd\xf2\xae\xdf\x00\x24\x23\x78\x28\x61\xd1\x94\x87\xd5\xff\x81\xe7\xec\x2e\x7c\x7a\x8e\x75\xf9\x41\x0f\xde\x8d\xb0\x65\x46\xae\x92\x63\xf3\xfd\x2a\xbd\x1d\xde\x00\x39\xb8\x4e\x82\xbd\x39\x66\xb7\xf6\x09\x00\x00\xff\xff\xa5\xdd\x58\x06\x6a\x00\x00\x00")

func configurdServicesHiServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_configurdServicesHiServiceYml,
		"configurd/services/hi-service.yml",
	)
}

func configurdServicesHiServiceYml() (*asset, error) {
	bytes, err := configurdServicesHiServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/services/hi-service.yml", size: 106, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"application/Dockerfile":                                        applicationDockerfile,
	"application/hello.go":                                          applicationHelloGo,
	"configurd/.gitignore":                                          configurdGitignore,
	"configurd/charts/example/.helmignore":                          configurdChartsExampleHelmignore,
	"configurd/charts/example/Chart.yaml":                           configurdChartsExampleChartYaml,
	"configurd/charts/example/templates/_helpers.tpl":               configurdChartsExampleTemplates_helpersTpl,
	"configurd/charts/example/templates/deployment.yaml":            configurdChartsExampleTemplatesDeploymentYaml,
	"configurd/charts/example/templates/ingress.yaml":               configurdChartsExampleTemplatesIngressYaml,
	"configurd/charts/example/templates/service.yaml":               configurdChartsExampleTemplatesServiceYaml,
	"configurd/charts/example/templates/tests/test-connection.yaml": configurdChartsExampleTemplatesTestsTestConnectionYaml,
	"configurd/charts/example/values.yaml":                          configurdChartsExampleValuesYaml,
	"configurd/namespaces/local/hello-group.yml":                    configurdNamespacesLocalHelloGroupYml,
	"configurd/services/hello-service.yml":                          configurdServicesHelloServiceYml,
	"configurd/services/hi-service.yml":                             configurdServicesHiServiceYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"application": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{applicationDockerfile, map[string]*bintree{}},
		"hello.go":   &bintree{applicationHelloGo, map[string]*bintree{}},
	}},
	"configurd": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{configurdGitignore, map[string]*bintree{}},
		"charts": &bintree{nil, map[string]*bintree{
			"example": &bintree{nil, map[string]*bintree{
				".helmignore": &bintree{configurdChartsExampleHelmignore, map[string]*bintree{}},
				"Chart.yaml":  &bintree{configurdChartsExampleChartYaml, map[string]*bintree{}},
				"templates": &bintree{nil, map[string]*bintree{
					"_helpers.tpl":    &bintree{configurdChartsExampleTemplates_helpersTpl, map[string]*bintree{}},
					"deployment.yaml": &bintree{configurdChartsExampleTemplatesDeploymentYaml, map[string]*bintree{}},
					"ingress.yaml":    &bintree{configurdChartsExampleTemplatesIngressYaml, map[string]*bintree{}},
					"service.yaml":    &bintree{configurdChartsExampleTemplatesServiceYaml, map[string]*bintree{}},
					"tests": &bintree{nil, map[string]*bintree{
						"test-connection.yaml": &bintree{configurdChartsExampleTemplatesTestsTestConnectionYaml, map[string]*bintree{}},
					}},
				}},
				"values.yaml": &bintree{configurdChartsExampleValuesYaml, map[string]*bintree{}},
			}},
		}},
		"namespaces": &bintree{nil, map[string]*bintree{
			"local": &bintree{nil, map[string]*bintree{
				"hello-group.yml": &bintree{configurdNamespacesLocalHelloGroupYml, map[string]*bintree{}},
			}},
		}},
		"services": &bintree{nil, map[string]*bintree{
			"hello-service.yml": &bintree{configurdServicesHelloServiceYml, map[string]*bintree{}},
			"hi-service.yml":    &bintree{configurdServicesHiServiceYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
