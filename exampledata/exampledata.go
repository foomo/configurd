// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package exampledata generated by go-bindata.// sources:
// example/application/Dockerfile
// example/application/hello.go
// example/configurd/.gitignore
// example/configurd/charts/example/.helmignore
// example/configurd/charts/example/Chart.yaml
// example/configurd/charts/example/templates/_helpers.tpl
// example/configurd/charts/example/templates/deployment.yaml
// example/configurd/charts/example/templates/ingress.yaml
// example/configurd/charts/example/templates/service.yaml
// example/configurd/charts/example/templates/tests/test-connection.yaml
// example/configurd/charts/example/values.yaml
// example/configurd/charts/mongodb/.helmignore
// example/configurd/charts/mongodb/Chart.yaml
// example/configurd/charts/mongodb/templates/_helpers.tpl
// example/configurd/charts/mongodb/templates/deployment.yaml
// example/configurd/charts/mongodb/templates/pv.yaml
// example/configurd/charts/mongodb/templates/pvc.yaml
// example/configurd/charts/mongodb/templates/service.yaml
// example/configurd/charts/mongodb/templates/tests/test-connection.yaml
// example/configurd/charts/mongodb/values.yaml
// example/configurd/namespaces/local/hello-group.yml
// example/configurd/namespaces/local/mongodb-group.yml
// example/configurd/services/hello-service.yml
// example/configurd/services/hi-service.yml
// example/configurd/services/mongodb-service.yml
package exampledata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _applicationDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x4a\xcc\x29\xc8\xcc\x4b\x55\x70\x0c\x56\x48\x2a\xcd\xcc\x49\x49\x2d\xe2\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\xe2\x0a\x0a\xf5\x53\x48\xcf\x87\xc8\x28\xe8\xe6\x2b\xe8\x67\xa4\xe6\xe4\xe4\x83\x64\xc0\x46\x40\xf4\x5a\xe5\x24\x96\xa4\x16\x97\x40\xf5\xe9\xea\xa6\x15\xe5\xe7\xda\x42\x0d\x83\xe9\x80\x50\x5c\x5c\xae\x7e\x21\x41\x91\x01\xfe\x9e\x7e\x21\x0a\xd1\x4a\x10\x41\xa5\x58\x40\x00\x00\x00\xff\xff\x8e\x35\x03\xdb\x8f\x00\x00\x00")

func applicationDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_applicationDockerfile,
		"application/Dockerfile",
	)
}

func applicationDockerfile() (*asset, error) {
	bytes, err := applicationDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application/Dockerfile", size: 143, mode: os.FileMode(420), modTime: time.Unix(1583934394, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _applicationHelloGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xb1\x4e\x03\x31\x0c\x9d\xe3\xaf\xb0\x32\x25\xd5\xe9\x60\x44\x95\x3a\x74\xa0\x74\xa8\x04\xa2\x03\x03\x42\x55\xe8\xb9\x69\x44\x9a\x3b\x12\x97\x0a\xa1\xfe\x3b\x4a\x2e\x45\x95\x98\x6c\x3f\x3f\x3f\xdb\x6f\x30\xdb\x0f\x63\x09\x0f\xc6\x05\x00\x77\x18\xfa\xc8\xa8\x40\xc8\x9d\x37\x56\x82\x90\xbe\x2f\x21\x10\xdf\xec\x99\x07\x09\x1a\x60\x77\x0c\xdb\x32\xa1\x34\xfe\x80\xc8\xd4\x79\xd7\x45\x4a\x09\xa7\x33\xcc\x65\xbb\xe6\xe8\x82\x55\xd2\x8c\xb8\x6c\x50\x4e\xef\x6e\x73\xa8\x08\x72\x8f\xde\x25\xa6\x90\x33\xa9\x47\x99\x87\x48\xc4\x2e\xd8\x7f\x3a\xb6\x36\xb2\xc2\xf2\x7e\xb5\x7a\xcc\x49\x22\x4e\xc8\x7b\xc2\x4b\x17\x0f\x94\x92\xb1\x74\x91\x6b\x9f\x4c\x4c\xa4\x34\x80\xb0\x57\xca\xaf\x6f\xef\xdf\x4c\x6a\x72\xbd\x31\x73\xf6\x26\x74\x9e\x62\xa6\xe4\x5f\xdb\xe5\x58\x2f\x8e\x61\xab\xf2\xcf\xea\x34\xe2\xcf\x94\x86\x3e\x24\x7a\x89\x8e\x29\x36\x18\x71\x52\xf1\xcf\x23\x25\x2e\xa6\x88\x4d\x83\x1b\x9c\xe1\xa9\x2d\x2c\x65\xff\xf6\x88\x73\xde\xe5\x7b\xdb\x2e\x0c\x1b\xaf\xca\xe8\xaa\x58\x31\x0f\xdd\x9a\xe2\x57\x3d\xad\x7a\xda\x60\xbd\x4b\x6b\x38\xc3\x6f\x00\x00\x00\xff\xff\xff\x16\x4b\x76\xb1\x01\x00\x00")

func applicationHelloGoBytes() ([]byte, error) {
	return bindataRead(
		_applicationHelloGo,
		"application/hello.go",
	)
}

func applicationHelloGo() (*asset, error) {
	bytes, err := applicationHelloGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application/hello.go", size: 433, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x2b\xcf\x2f\xca\x4e\xc9\x2c\x02\x04\x00\x00\xff\xff\x88\x9c\x6c\x73\x08\x00\x00\x00")

func configurdGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_configurdGitignore,
		"configurd/.gitignore",
	)
}

func configurdGitignore() (*asset, error) {
	bytes, err := configurdGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/.gitignore", size: 8, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleHelmignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x23\x31\x0c\x86\xef\x7a\x8a\x7f\x99\xcb\xee\xb0\x78\x1e\x22\xd9\xc3\x9e\x5a\x48\xc9\xb5\x78\x66\x14\x5b\x89\xc7\x36\x96\x26\x69\x7b\xe8\xb3\x97\x24\x84\xf6\xf2\x81\x3e\x24\xf1\x75\x78\xf6\x66\xdc\xb2\xc2\x0a\x24\xe4\xd2\x18\x97\xc8\x19\xe3\x2a\x69\x96\x1c\x50\xfd\x74\xf2\x81\xd5\x51\x87\x97\x28\x0a\x5d\x6b\x2d\xcd\x14\x1a\x39\x25\x84\x54\x46\x2c\xde\xa6\x28\x39\xfc\x45\xe3\xe4\x4d\xce\x8c\xea\x2d\xfe\xf0\x3e\xcf\xd4\x21\x73\xf0\x26\x25\xe3\x77\x6d\x7c\x90\x37\x9e\x71\x11\x8b\xf8\xf5\xc7\xe1\x29\xa7\x77\x94\x7c\xbb\xbc\x26\xa1\x72\x43\x92\xcc\x8e\xdc\x76\xf7\xba\xb3\xd2\x98\x3a\x6c\xca\xb2\x94\x8c\xfd\x66\x87\x59\x9a\x92\x0b\x62\xc3\x8d\xf7\x7c\x72\xe3\x47\x1b\x6e\x7c\x88\x18\x86\x2b\x1e\xa3\x9e\xf3\xf0\xfd\x68\xf4\xd3\x69\xad\x38\x48\x62\xa5\xde\xe9\xa5\x52\xef\x46\x7f\xa2\xde\xd9\x52\xa9\xff\xa4\x0e\x7b\xdf\xa4\xac\x8a\xff\xdb\x7f\x4a\xae\xb6\x72\xe4\xc9\xc8\xc9\xcc\x7e\xb8\xef\xb5\x72\x24\x77\xd6\xa9\xcc\x3c\xd0\x57\x00\x00\x00\xff\xff\xf5\x89\xaa\x2d\x56\x01\x00\x00")

func configurdChartsExampleHelmignoreBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleHelmignore,
		"configurd/charts/example/.helmignore",
	)
}

func configurdChartsExampleHelmignore() (*asset, error) {
	bytes, err := configurdChartsExampleHelmignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/.helmignore", size: 342, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleChartYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\x4a\x2c\x28\x80\x73\x95\x0c\xf5\x0c\x94\xb8\x52\x52\x8b\x93\x8b\x32\x0b\x4a\xc0\x42\x8e\x79\x0a\xae\x15\x89\xb9\x05\x39\xa9\x0a\xce\x19\x89\x45\x25\x0a\x69\xf9\x45\x0a\xce\xf9\x79\x69\x99\xe9\xa5\x45\x29\x5c\x79\x89\xb9\xa9\x56\x0a\xa9\x10\x15\x5c\x65\x30\x83\x0c\xf4\x0c\xf5\x0c\xb8\x00\x01\x00\x00\xff\xff\xe2\x6b\xa4\x38\x6a\x00\x00\x00")

func configurdChartsExampleChartYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleChartYaml,
		"configurd/charts/example/Chart.yaml",
	)
}

func configurdChartsExampleChartYaml() (*asset, error) {
	bytes, err := configurdChartsExampleChartYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/Chart.yaml", size: 106, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplates_helpersTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x0f\xd1\x40\x9b\xb2\xce\xa1\xd0\xc3\x42\x4e\x69\x0f\xa5\x90\x42\x03\xe9\xb1\xc8\xf6\xa8\x3b\x20\xcb\xae\x46\xda\xee\x92\xe4\xbf\x17\x49\x8e\x77\xb7\xe0\xb2\x7b\x1b\xac\xa7\x37\x6f\xbe\x91\x9f\x9e\x6e\xae\xb1\xe5\x7e\x0d\xa1\x00\xc3\x96\xc2\x7e\xa4\xdb\x3e\x4a\xd0\xed\x86\xd6\xb8\xbe\x79\x79\xa9\x92\xaa\xfa\xbc\x1b\xb5\xeb\x10\x36\x04\xa7\x7b\xc2\x60\x72\xdd\x6e\xb4\x0f\x75\x35\xe9\x56\xe8\xc8\xb0\x23\x28\xda\xe9\x7e\xb4\x54\x27\xad\xc2\xea\x70\xaa\xa3\x0d\xa8\xef\xf2\xb5\xfb\x64\x54\x3f\x6a\x1b\x49\xb2\xf2\xdb\x96\xbc\xe7\x8e\xf0\x8c\xe0\xa3\x6b\xf1\xf1\x43\x2e\xb9\x7f\x88\xc6\xf0\x0e\x6a\x75\x30\x23\xd7\xe5\xba\xe4\xbb\xf3\xa4\x03\x41\xcf\x3d\x4c\xb4\x76\x8f\xdf\x51\x5b\x36\x4c\x1d\xf4\x38\xe6\xe4\x75\xf5\x83\x8a\x7b\xd6\x87\xd4\x23\x4d\x21\x68\xa8\xd5\x51\x08\x32\xf4\x84\xaf\xb1\x21\xef\x28\x90\x94\x79\x0d\x93\xed\x04\xda\x13\x2c\xf7\x1c\xa8\x43\x18\x10\x36\x2c\x78\xdb\xec\x33\x8b\x4f\xf7\x0f\x49\xcb\xee\x17\x64\xa4\xf6\x5d\x5d\x7d\x31\xf0\x64\x49\xcb\x04\xad\x1d\x5c\xd0\xec\xa4\x60\x2b\xdf\x38\xe0\x0f\x5b\x8b\x86\x10\x25\xe5\x14\xe8\x1c\x7e\x4a\xbb\x88\x36\x69\x4e\xf1\xb2\x99\x69\xbe\x1e\xce\x44\x5f\x35\x8b\x82\xb3\x90\x5b\x39\x38\xbd\xc9\xf1\xd7\xb7\xe7\x6f\xf5\x28\xe7\x4c\xa2\xb8\xd4\xdf\x0b\xa6\x72\x79\xce\x7a\xf2\xf5\xe2\x80\xa3\x67\x17\x0c\xd4\x95\xac\xae\x44\xfd\xe3\x56\xfa\x5e\xf2\xce\x96\xea\x93\xf7\x77\xb4\xd8\xf4\xbb\x6c\xc9\x0b\x0f\x2e\x2d\x35\x2f\x77\x7a\x29\x45\x65\x75\x43\xf6\x3f\x0b\xce\x2a\xb5\x38\xce\x31\xed\x52\x3f\x4e\xdd\x9e\xe1\x69\xb4\xba\x25\xa8\xf7\x0a\xea\xa7\xba\x68\xce\xbf\x01\x00\x00\xff\xff\xef\x62\xa1\x95\x15\x04\x00\x00")

func configurdChartsExampleTemplates_helpersTplBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplates_helpersTpl,
		"configurd/charts/example/templates/_helpers.tpl",
	)
}

func configurdChartsExampleTemplates_helpersTpl() (*asset, error) {
	bytes, err := configurdChartsExampleTemplates_helpersTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/_helpers.tpl", size: 1045, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x8e\xda\x30\x10\xbd\xf3\x15\xa3\xbd\x27\x68\x7b\xaa\x72\xdd\x1e\xab\x0a\x2d\xd5\x4a\x3d\x0e\xce\x00\x16\xb6\xc7\xb2\x27\xa9\x10\xe5\xdf\x2b\x93\xc0\xda\xcb\xa6\x74\xd1\xe6\x96\xf1\x9b\x79\xcf\xef\xd9\x46\xaf\x5f\x28\x44\xcd\xae\x01\xf4\x3e\xce\xfb\xc7\xd9\x4e\xbb\xb6\x81\x6f\xe4\x0d\xef\x2d\x39\x99\x59\x12\x6c\x51\xb0\x99\x01\x38\xb4\xd4\xc0\xc3\xe1\x00\xf5\x33\x19\xc2\x48\xf5\x0f\xb4\x04\xc7\xe3\xc3\x0c\xc0\xe0\x8a\x4c\x4c\x38\x48\xe3\xea\x5d\xb7\xa2\xe0\x48\x28\xd6\x9a\xe7\x43\xef\x3b\xad\x13\x78\x8f\x41\x2a\x5e\x0f\x2d\x2f\x68\x3a\x8a\xf5\x26\x70\xe7\xa7\x5b\x2c\x3a\xdc\x50\x5b\xad\xf6\x25\xd1\x92\x42\xaf\xd5\x85\x6b\x4b\xc6\xd6\x71\x3b\x57\x5b\x0c\xf2\xfe\x76\xaa\xbc\xf6\x4c\xbd\x4e\x26\x9d\xb6\x19\x3d\xa9\xb4\xc5\x40\xde\x68\x85\xb1\xd0\x37\x16\x9f\xb8\x73\x32\xb0\x45\x32\xa4\x84\xc3\xe0\x8a\x45\x51\xdb\xef\x99\x4d\x1f\x37\xea\x0e\xab\x84\xac\x37\x28\x34\x6a\xc8\xf2\x4c\x9f\x29\xe4\xdc\x23\xe8\xae\xf4\xce\x3e\xa6\x4f\xb1\x13\xd4\x8e\x42\x26\xa3\x82\xdb\xb4\x00\xda\xe2\xe6\x7c\x22\x47\x96\x53\x29\x25\xc1\x51\x0b\x87\x3d\x1c\x8f\xcd\xd5\xb2\xe0\x66\x3c\xb4\xc5\xa4\x45\x67\xcc\x82\x8d\x56\xfb\x42\xf8\xd0\xe3\x2f\x8b\xa5\x86\xc3\xa1\x82\xdf\x5a\xb6\x17\x38\x86\x4d\x2c\x21\xa9\xd2\x64\xff\x43\x93\xf0\x2f\xb4\x06\x6a\xf8\x03\x4e\xbb\x96\x9c\xc0\xe3\x97\xeb\xd9\xe4\xda\x1b\x84\xe4\xfa\x12\x41\xae\xff\x3c\x3a\xcf\x41\xde\xa8\x3f\x87\x73\x09\xae\x4a\xa0\x02\x92\xa5\xba\xe0\x74\xcd\x32\x3f\xe3\x70\x1f\xeb\x02\x51\x92\x9e\x88\x03\x0b\x2b\x36\x0d\xfc\x7c\x5a\x64\x6b\x46\xf7\xe4\x28\xc6\x45\xe0\x15\x95\xc2\x44\xf9\x25\xab\x1d\x49\xf3\x76\xd6\x49\xc3\xa4\xde\x40\xd8\xea\x4f\x9f\x19\xb9\x0b\x8a\xfe\x91\xfc\xe5\xd9\x18\x91\x13\xd1\x5c\x05\xee\xb8\xa5\xe5\xf8\xb2\xbc\xc2\xf2\xea\x2b\xe7\x44\xf4\x5f\xcb\xf1\x59\xea\xd7\xe7\x79\xbd\xd6\x4e\x4b\x76\xec\xcf\x95\xff\x67\xb9\xc5\x21\x6c\x28\xa0\x68\x76\xd9\xd5\xc9\x8a\x77\x31\xfd\x0d\x00\x00\xff\xff\x38\xfc\xc2\xb1\xe0\x06\x00\x00")

func configurdChartsExampleTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplatesDeploymentYaml,
		"configurd/charts/example/templates/deployment.yaml",
	)
}

func configurdChartsExampleTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := configurdChartsExampleTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/deployment.yaml", size: 1760, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplatesIngressYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x8e\xe2\x30\x0c\xbd\xf7\x2b\x2c\xee\x0d\x42\xda\x53\xff\x60\x2f\x68\xc5\x4a\x48\x7b\x74\x5b\x43\x23\x5a\x27\x4a\x5c\x76\x46\x9d\xfe\xfb\xc8\xd3\x32\x34\x50\x86\x13\x7e\x7d\x7e\x2f\x7e\xf6\x30\xe4\x60\x4f\x80\x5c\x83\x39\x62\xdb\x53\x34\x96\xcf\x81\x62\x34\x8d\x8b\xf2\x04\x7a\x94\x06\xc6\x31\x43\x6f\x8f\x14\xa2\x75\x5c\x00\xbd\x09\xb1\xfe\x8d\xdb\xeb\xae\x24\xc1\x5d\x76\xb1\x5c\x17\xf0\x7b\x6a\xca\x3a\x12\xac\x51\xb0\xc8\x00\x18\x3b\x2a\x60\x33\x0c\x60\x0e\xd4\x12\x46\x32\x7b\xec\x08\xc6\x31\x9f\x3d\x36\x19\x40\x8b\x25\xb5\x51\xf9\x00\xe8\xbd\xb9\xf4\x25\x05\x26\xd1\x97\xb8\xed\xa4\xb1\x22\xf1\x82\xef\x31\x48\xee\x4e\x53\xcb\x3c\xd0\x39\xb8\xde\xbf\x6e\xe9\x90\xf1\x4c\x75\x5e\xbe\xa7\x46\x7f\x29\x5c\x6d\xf5\xed\xd5\x50\xdb\x99\xd8\x6c\xab\x06\x83\xbc\x18\x6b\x89\x1d\xe8\x6a\x35\x29\x18\x47\x1d\x53\xd3\xff\x6f\xa5\x79\x8a\x19\x99\x9d\xa0\x68\xa6\x93\xd5\x02\x98\x52\xd1\x56\x71\xff\xb0\x6b\xc1\xc0\x07\xb0\xe5\x9a\x58\xe0\xd7\x44\xd7\xaf\xc4\xb5\x16\xd1\x53\x55\x64\xf3\x9e\x1f\x7d\x22\x55\x81\xe4\x9e\x9e\xdc\x42\xcf\x41\xd7\x3f\x17\x5a\x2e\xa2\x4b\x0e\x64\x0e\x02\xe0\x2e\x55\xac\x91\x53\xa7\xc5\xfb\x00\x42\xdf\x52\x62\xbb\x2a\x90\xba\x35\x22\xfe\xf6\x38\x00\xbd\xca\x78\x2f\x55\x47\xa1\x55\x9d\xdb\x05\xc3\xe2\x57\x62\x75\x21\xae\x8b\x04\xd4\x91\xbe\x96\xbd\xff\xf1\xdc\x9e\xe8\x7f\x5c\x48\x27\x98\x71\x53\x39\x16\xb4\x4c\x41\x19\x0f\x29\x7c\x06\x00\x00\xff\xff\x94\xce\x63\x51\x88\x03\x00\x00")

func configurdChartsExampleTemplatesIngressYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplatesIngressYaml,
		"configurd/charts/example/templates/ingress.yaml",
	)
}

func configurdChartsExampleTemplatesIngressYaml() (*asset, error) {
	bytes, err := configurdChartsExampleTemplatesIngressYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/ingress.yaml", size: 904, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x31\x6b\xc3\x30\x10\x46\x77\xfd\x8a\x23\xbb\x15\xba\x6a\xed\x5e\x42\x5a\xb2\x9f\xe5\xaf\xb1\x88\x2c\x89\xd3\xd9\x10\x82\xff\x7b\x71\x9d\x40\x03\x6e\x87\x8e\x92\xde\x43\xf7\x8e\x4b\x38\x41\x6a\xc8\xc9\xd1\xf4\x62\x2e\x21\x75\x8e\xde\x21\x53\xf0\x30\x03\x94\x3b\x56\x76\x86\x28\xf1\x00\x47\xb7\x1b\xd9\x23\x22\xb8\xc2\xbe\xf1\x00\x9a\x67\x43\x14\xb9\x45\xac\x0b\x45\xc4\xa5\xd8\xcb\xd8\x42\x12\x14\xd5\x86\xbc\xff\xcb\xdc\xe2\x0b\x8b\x36\xf9\x73\x55\x4e\x1c\x47\x54\x7b\x96\x3c\x96\xdf\x95\x81\x13\x9f\xd1\x35\xed\xf5\xf9\xa3\x7b\xc8\x43\xec\x11\x07\x5b\xfb\xbd\xef\x59\xd4\xd1\x6e\x63\xa6\xe6\xe7\xdd\x11\x53\x58\x56\x43\xf3\xbc\x33\xb5\xc0\x2f\x89\x15\x11\x5e\xb3\xfc\x27\x57\xaf\x05\x4f\x5d\x75\x1d\xd0\x2e\x0f\x2b\x52\xb2\xe8\x7d\x95\xcd\xf7\x61\x93\xf7\x39\x29\x87\x04\x39\x64\xd1\x47\x1e\x51\x91\xac\xd9\xe7\xe8\xe8\xe3\xf5\x60\xbe\x02\x00\x00\xff\xff\x0a\x95\xdd\xf0\xdc\x01\x00\x00")

func configurdChartsExampleTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplatesServiceYaml,
		"configurd/charts/example/templates/service.yaml",
	)
}

func configurdChartsExampleTemplatesServiceYaml() (*asset, error) {
	bytes, err := configurdChartsExampleTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/service.yaml", size: 476, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleTemplatesTestsTestConnectionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x91\x4b\x4f\x71\xd9\xd5\x0f\x51\xca\x06\xbd\x94\x1d\x14\x47\x4b\x4c\x6d\x39\x58\x4a\xd7\x52\xf2\xee\xc3\x69\xc6\x36\xd6\xb1\xeb\x2f\x7d\xbf\xf4\x4b\x38\xfa\x03\x65\xf1\x89\x2d\x9c\x9f\xaa\x93\xe7\xce\xc2\x3e\x75\x55\x24\xc5\x0e\x15\x6d\x05\xc0\x18\xc9\x42\x7d\xbb\x81\x67\x17\xa6\x8e\xa0\xa6\x0b\xc6\x31\x90\x79\x9b\x42\x28\xe5\x1a\x0c\xcc\x73\xa3\x24\xda\xb8\xc4\x4c\x4e\x7d\xe2\xba\x02\x08\xd8\x52\x90\x62\x03\x80\xe3\x68\x4e\x53\x4b\x99\x49\x49\x8c\x4f\xdb\xbb\xf5\x23\xe7\x2f\xd7\x05\x1d\x28\x44\x23\xc3\xd6\x0d\x98\xf5\x31\xb1\x94\xbe\x21\xbf\xa7\x79\x16\x45\x76\xf7\x89\xe6\x99\x02\xa1\x90\xd9\x61\xa4\xbf\x99\x88\x8c\x3d\x75\x4d\x7b\xfd\x49\xbd\x50\x3e\x7b\xb7\x82\xc8\x9c\x14\x4b\xe4\x35\x69\xfd\xb9\xef\x90\xd2\xa9\xb6\xb0\x1c\x46\x26\xe7\x48\xa4\x92\x91\x5c\x69\x73\x89\x15\x3d\x53\x5e\xa1\x66\xbd\xf4\x7b\x4f\xba\x08\x00\x3e\x62\x4f\x16\xda\x49\xae\x6d\xba\xac\xa2\x4b\x31\x62\x79\xd4\x71\x53\x5a\x37\xaf\xab\x8e\xb9\x17\x0b\x70\xdc\xfc\xff\x29\x5b\xa2\x1c\x30\x4c\x24\x46\xee\x49\xcc\x98\xb2\xc2\x3c\x2f\x76\x99\x44\x31\xeb\x3e\x05\xef\xae\x16\x76\x74\xa6\x5c\x7d\x04\x00\x00\xff\xff\xc5\xf1\x40\xab\x2d\x02\x00\x00")

func configurdChartsExampleTemplatesTestsTestConnectionYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleTemplatesTestsTestConnectionYaml,
		"configurd/charts/example/templates/tests/test-connection.yaml",
	)
}

func configurdChartsExampleTemplatesTestsTestConnectionYaml() (*asset, error) {
	bytes, err := configurdChartsExampleTemplatesTestsTestConnectionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/templates/tests/test-connection.yaml", size: 557, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsExampleValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdc\x46\x0c\xbd\xcf\xaf\x20\xd6\x87\x5c\xec\xad\x9d\x5e\x02\x01\x39\x18\x4e\x5b\x18\xb0\x9d\x45\xd7\x45\x51\x04\x39\x70\x47\x94\x34\xed\x68\xa8\x92\x9c\x75\x84\xa2\xff\xbd\x98\x91\xfc\xd1\x38\x87\x9c\x76\x76\xf4\xc8\x79\x7c\x7c\xe4\x09\x7c\xa0\x0e\x73\x34\x38\x62\xcc\xa4\xd0\xb1\x80\x91\xda\xd6\x9d\xc0\xfd\x10\x14\x82\x02\xc2\x1f\x97\xb7\x37\x67\x1d\xcb\x88\x66\xd4\x42\x17\x22\x15\xc0\x07\xf2\x11\x85\xe0\x88\x12\xf0\x10\x49\xc1\x18\x0e\x04\x13\xaa\x52\x0b\x21\x19\xc3\xcc\xb9\x64\x1c\xa7\x88\x46\xba\x75\x4e\x68\x8a\xc1\xe3\x15\xe7\x64\x0d\x5c\x38\x17\x46\xec\xa9\x71\x00\x42\x13\x6b\x30\x96\xb9\x81\xd4\x87\xf4\xc5\x01\x18\xf6\x0d\xd4\x50\x73\x00\x53\x8e\x71\xc7\x31\xf8\xb9\x81\xeb\xee\x8e\x6d\x27\xa4\x94\x6c\x4d\xb2\xcb\x31\xee\xc9\x0b\x99\x36\xf0\xe9\xb3\x4b\x38\xd2\xc7\x23\x89\x84\x96\x1a\xd8\x6c\x5c\x97\x63\x7c\x75\xe9\x94\xe4\x18\x3c\x5d\x7a\x5f\x39\x39\x80\x13\xd8\x4f\xe4\x43\x17\x48\xe1\x61\x20\x1b\x48\x00\x61\xc5\x01\x2e\x40\xd0\x81\x73\x6c\x4b\xc1\x5e\x08\x8d\x5a\x07\xeb\xa9\x01\x93\x4c\x35\xd1\x65\x4a\x6c\x68\x81\x53\x55\x07\xdb\xb6\xfc\xd8\x40\x5f\xa7\x73\x00\xf8\x8c\x6d\xe0\x9f\x7f\x6b\xfc\xfd\x40\x50\x28\x03\x77\xdf\x8a\x2a\xc9\xb2\xd2\xb6\x62\xaf\x3b\x48\x6c\xa0\x64\x80\xa9\x5d\xb9\x94\x0e\x16\x36\xa7\x80\x4b\xa2\xa0\xd0\x53\x22\x29\x8c\x21\x6b\x48\x7d\x4d\xfc\xa8\xcd\x53\xb3\x1c\x54\x7c\xe3\xdc\xc4\xed\x9e\x7c\x96\x60\xf3\x15\x27\xa3\x2f\xf6\x44\xaf\xd3\x5f\x84\xf3\xd4\xc0\xdb\xf3\xf3\xf3\x22\xe5\xb7\x61\x1e\x27\x3c\x84\x18\x2c\x90\x2e\x02\x03\xb4\xc2\xd3\xe3\xf9\x0c\x2e\x6f\x6e\xea\x59\x08\xdb\x8f\x29\xce\xbf\x32\xdb\xcf\x21\x92\xce\x6a\x34\xbe\x10\x54\x72\xba\xd4\x3b\x4e\x05\xf0\xf5\xf5\x6f\x4a\xd2\xc0\xc5\x4a\xa5\x0a\x55\x5e\xb0\x79\xa2\x06\xae\x62\x56\x23\xb9\xde\x15\x23\xb1\x58\x03\xef\xce\x4b\xc7\x38\x19\x86\x44\xb2\xab\x77\x3f\xd6\xe0\x7e\x29\xaa\xda\xce\x51\x3a\x56\x3b\x95\x67\xce\x16\x4d\xe0\xfe\xa7\xfd\xfd\xca\xbd\x4e\x4e\x03\x9b\x02\xde\x38\x87\xd2\xeb\x0b\xf8\x06\xa5\xbf\x78\xff\x9e\x13\x6d\x9c\x73\x21\xf5\x42\x5a\x25\x78\xdd\xec\x12\xf0\x57\x3e\x90\x24\x2a\xa3\x12\xf8\x87\x15\xbe\xf5\x11\x55\x9f\x87\xe2\x35\xd0\xa2\x9e\xa1\x1f\x2b\x0d\xc9\xb4\x71\x00\x03\xab\x55\x7f\x03\x4c\x68\xc3\x7a\xd4\x3a\x1e\x77\xb5\x86\xe2\x7d\x21\xe5\x2c\x9e\x9e\x0d\xf7\x3b\x41\xd6\x8c\x31\xce\x20\xe4\x79\x1c\x29\xb5\xd5\x56\xc6\xa0\x75\x2a\x66\x68\xd7\xa5\xf1\x14\x5d\xfd\x66\x0c\x91\xf0\x48\x60\x65\x71\x60\x59\x1c\x9e\x93\xfa\xc0\x59\x17\x17\x0c\x5c\xac\x5b\x77\xcc\x50\x9e\x21\xd9\x2e\x5b\x06\xa3\x32\x84\x54\x1c\xab\xa4\xe0\x07\x4c\x7e\xf9\x15\xd3\xd2\x5b\xe0\x04\x94\x8e\x41\x38\x8d\x94\x4c\xe1\x21\xd8\x00\x31\x98\xc5\xb5\xff\x8f\x54\x4e\x41\xb3\x1f\xca\xf3\xb7\x21\x85\x22\xd3\xb6\x0c\xc6\xcc\x19\x5a\x86\x07\x4c\xff\xab\xe4\x45\x58\x4e\x4b\xb5\xb6\x8c\x03\xc7\xc8\x0f\x21\xf5\x35\x7b\x0c\xa9\x40\xb0\xfd\x33\x6b\xfd\x3e\x96\x07\x12\x79\x52\x45\x99\x4f\x6b\xfd\x42\x23\xd7\xea\x09\x7c\x96\x38\xc3\x41\xb0\x6a\xd3\x19\x09\xbc\x79\x96\xfa\xcd\x76\x4d\x3a\x06\x7b\x1a\x07\x3f\xe5\x6a\xdd\x71\xfd\x3f\xd2\x58\x37\xe1\xc5\xdb\x77\xb7\x61\x2d\xf1\xef\x4c\xfa\xbd\x11\x2e\x71\x4b\x7b\x8a\xe4\x8d\xa5\x76\xd7\x19\xc7\x32\xf6\x8b\xe5\x3e\x7d\x76\x0e\xbb\x2e\xa4\x60\x73\xfd\xfc\x5f\x00\x00\x00\xff\xff\x79\x8e\x4d\x92\x0c\x06\x00\x00")

func configurdChartsExampleValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsExampleValuesYaml,
		"configurd/charts/example/values.yaml",
	)
}

func configurdChartsExampleValuesYaml() (*asset, error) {
	bytes, err := configurdChartsExampleValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/example/values.yaml", size: 1548, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbHelmignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x23\x31\x0c\x86\xef\x7a\x8a\x7f\x99\xcb\xee\xb0\x78\x1e\x22\xd9\xc3\x9e\x5a\x48\xc9\xb5\x78\x66\x14\x5b\x89\xc7\x36\x96\x26\x69\x7b\xe8\xb3\x97\x24\x84\xf6\xf2\x81\x3e\x24\xf1\x75\x78\xf6\x66\xdc\xb2\xc2\x0a\x24\xe4\xd2\x18\x97\xc8\x19\xe3\x2a\x69\x96\x1c\x50\xfd\x74\xf2\x81\xd5\x51\x87\x97\x28\x0a\x5d\x6b\x2d\xcd\x14\x1a\x39\x25\x84\x54\x46\x2c\xde\xa6\x28\x39\xfc\x45\xe3\xe4\x4d\xce\x8c\xea\x2d\xfe\xf0\x3e\xcf\xd4\x21\x73\xf0\x26\x25\xe3\x77\x6d\x7c\x90\x37\x9e\x71\x11\x8b\xf8\xf5\xc7\xe1\x29\xa7\x77\x94\x7c\xbb\xbc\x26\xa1\x72\x43\x92\xcc\x8e\xdc\x76\xf7\xba\xb3\xd2\x98\x3a\x6c\xca\xb2\x94\x8c\xfd\x66\x87\x59\x9a\x92\x0b\x62\xc3\x8d\xf7\x7c\x72\xe3\x47\x1b\x6e\x7c\x88\x18\x86\x2b\x1e\xa3\x9e\xf3\xf0\xfd\x68\xf4\xd3\x69\xad\x38\x48\x62\xa5\xde\xe9\xa5\x52\xef\x46\x7f\xa2\xde\xd9\x52\xa9\xff\xa4\x0e\x7b\xdf\xa4\xac\x8a\xff\xdb\x7f\x4a\xae\xb6\x72\xe4\xc9\xc8\xc9\xcc\x7e\xb8\xef\xb5\x72\x24\x77\xd6\xa9\xcc\x3c\xd0\x57\x00\x00\x00\xff\xff\xf5\x89\xaa\x2d\x56\x01\x00\x00")

func configurdChartsMongodbHelmignoreBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbHelmignore,
		"configurd/charts/mongodb/.helmignore",
	)
}

func configurdChartsMongodbHelmignore() (*asset, error) {
	bytes, err := configurdChartsMongodbHelmignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/.helmignore", size: 342, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbChartYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\x4a\x2c\x28\x80\x73\x95\x0c\xf5\x0c\x94\xb8\x52\x52\x8b\x93\x8b\x32\x0b\x4a\xc0\x42\xb9\xf9\x79\xe9\xf9\x29\x49\x0a\xce\x19\x89\x45\x25\x0a\x69\xf9\x45\x0a\xce\xf9\x79\x69\x99\xe9\xa5\x45\x29\x5c\x79\x89\xb9\xa9\x70\x15\x5c\x65\x30\x53\x0c\xf4\x0c\xf5\x0c\xb8\x00\x01\x00\x00\xff\xff\x07\x6b\x00\x57\x67\x00\x00\x00")

func configurdChartsMongodbChartYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbChartYaml,
		"configurd/charts/mongodb/Chart.yaml",
	)
}

func configurdChartsMongodbChartYaml() (*asset, error) {
	bytes, err := configurdChartsMongodbChartYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/Chart.yaml", size: 103, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbTemplates_helpersTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x0f\xd1\x40\x9b\xb2\xce\xa1\xd0\xc3\x42\x4e\x69\x0f\xa5\x90\x42\x03\xe9\xb1\xc8\xf6\xa8\x3b\x20\xcb\xae\x46\xda\xee\x92\xe4\xbf\x17\x49\x8e\x77\xb7\xe0\xb2\x7b\x1b\xac\xa7\x37\x6f\xbe\x91\x9f\x9e\x6e\xae\xb1\xe5\x7e\x0d\xa1\x00\xc3\x96\xc2\x7e\xa4\xdb\x3e\x4a\xd0\xed\x86\xd6\xb8\xbe\x79\x79\xa9\x92\xaa\xfa\xbc\x1b\xb5\xeb\x10\x36\x04\xa7\x7b\xc2\x60\x72\xdd\x6e\xb4\x0f\x75\x35\xe9\x56\xe8\xc8\xb0\x23\x28\xda\xe9\x7e\xb4\x54\x27\xad\xc2\xea\x70\xaa\xa3\x0d\xa8\xef\xf2\xb5\xfb\x64\x54\x3f\x6a\x1b\x49\xb2\xf2\xdb\x96\xbc\xe7\x8e\xf0\x8c\xe0\xa3\x6b\xf1\xf1\x43\x2e\xb9\x7f\x88\xc6\xf0\x0e\x6a\x75\x30\x23\xd7\xe5\xba\xe4\xbb\xf3\xa4\x03\x41\xcf\x3d\x4c\xb4\x76\x8f\xdf\x51\x5b\x36\x4c\x1d\xf4\x38\xe6\xe4\x75\xf5\x83\x8a\x7b\xd6\x87\xd4\x23\x4d\x21\x68\xa8\xd5\x51\x08\x32\xf4\x84\xaf\xb1\x21\xef\x28\x90\x94\x79\x0d\x93\xed\x04\xda\x13\x2c\xf7\x1c\xa8\x43\x18\x10\x36\x2c\x78\xdb\xec\x33\x8b\x4f\xf7\x0f\x49\xcb\xee\x17\x64\xa4\xf6\x5d\x5d\x7d\x31\xf0\x64\x49\xcb\x04\xad\x1d\x5c\xd0\xec\xa4\x60\x2b\xdf\x38\xe0\x0f\x5b\x8b\x86\x10\x25\xe5\x14\xe8\x1c\x7e\x4a\xbb\x88\x36\x69\x4e\xf1\xb2\x99\x69\xbe\x1e\xce\x44\x5f\x35\x8b\x82\xb3\x90\x5b\x39\x38\xbd\xc9\xf1\xd7\xb7\xe7\x6f\xf5\x28\xe7\x4c\xa2\xb8\xd4\xdf\x0b\xa6\x72\x79\xce\x7a\xf2\xf5\xe2\x80\xa3\x67\x17\x0c\xd4\x95\xac\xae\x44\xfd\xe3\x56\xfa\x5e\xf2\xce\x96\xea\x93\xf7\x77\xb4\xd8\xf4\xbb\x6c\xc9\x0b\x0f\x2e\x2d\x35\x2f\x77\x7a\x29\x45\x65\x75\x43\xf6\x3f\x0b\xce\x2a\xb5\x38\xce\x31\xed\x52\x3f\x4e\xdd\x9e\xe1\x69\xb4\xba\x25\xa8\xf7\x0a\xea\xa7\xba\x68\xce\xbf\x01\x00\x00\xff\xff\xef\x62\xa1\x95\x15\x04\x00\x00")

func configurdChartsMongodbTemplates_helpersTplBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbTemplates_helpersTpl,
		"configurd/charts/mongodb/templates/_helpers.tpl",
	)
}

func configurdChartsMongodbTemplates_helpersTpl() (*asset, error) {
	bytes, err := configurdChartsMongodbTemplates_helpersTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/templates/_helpers.tpl", size: 1045, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbTemplatesDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xc1\x6e\xdb\x3a\x10\xbc\xfb\x2b\x08\xe3\xbd\xa3\x14\xa4\xa7\x42\x40\x4f\xe9\xb1\x0d\x84\xa4\x08\xd0\xe3\x9a\x5a\x4b\x44\x48\x2e\x41\xae\x54\x18\xae\xff\xbd\xa0\x64\x2b\xa4\x1d\xdb\xa9\x51\x1e\x97\xb3\x33\xc3\x59\x52\xda\x6e\x0b\xf1\x9f\x1b\xa4\xa8\xbe\x08\xe7\x95\xe5\xb5\x58\xfe\x1f\x0a\x37\xc8\xa5\x28\x9f\x50\x23\x04\x2c\x1f\xc1\xa0\xd8\xed\x16\xe0\xd4\x0b\xfa\xa0\xc8\x56\x02\x9c\x0b\x77\xc3\xfd\xe2\x55\xd9\xa6\x12\x5f\xd1\x69\xda\x18\xb4\xbc\x30\xc8\xd0\x00\x43\xb5\x10\xc2\x82\xc1\x4a\x2c\xb7\xdb\x13\xae\xe5\x42\x08\x0d\x2b\xd4\x21\xe2\x44\xa4\x2b\x5f\xfb\x15\x7a\x8b\x8c\xa1\x54\x74\x37\xf5\xbe\xd3\x7a\x06\xef\xc0\x73\x41\xeb\xa9\xe5\x05\x74\x8f\xa1\x6c\x3d\xf5\xee\x7c\x8b\x01\x0b\x2d\x36\xc5\x6a\x93\x0b\x3d\xa3\x1f\x94\x9c\xb5\x3a\xd4\xa6\x0c\xdd\x9d\xec\xc0\xf3\xfb\xc7\x29\xd2\xda\x13\x0e\x2a\x86\x34\x1e\x33\x38\x94\xf1\x88\x1e\x9d\x56\x12\x42\xe6\x6f\x5f\x7c\xa0\xde\xf2\xa4\x16\x50\xa3\x64\xf2\x53\x2a\x06\x58\x76\xdf\x92\x98\xfe\x3e\xa8\x1b\xa2\x62\x34\x4e\x03\xe3\xde\x43\x32\xcf\xb8\x74\x66\xe7\x16\x43\x37\x4d\xef\x90\x63\x5c\x92\x2c\x83\xb2\xe8\x13\x1b\x85\xb8\x2e\x2b\x84\x32\xd0\x1e\x6e\xe4\x5e\x65\x2c\xc5\x49\x50\x50\x4c\x7e\x23\x76\xbb\xea\x64\x9b\xa1\xdd\x5f\xda\x8c\xa9\xee\xb5\xae\x49\x2b\xb9\xc9\x8c\x4f\x3d\x6e\xde\xcc\x3d\x80\x6f\x13\xdf\x71\xc5\x47\xc8\xf4\x13\x8c\x9e\x29\x22\x48\xfc\x16\x56\xd9\x06\x2d\x8b\xfb\x4f\x39\x07\xda\xe1\x2a\x05\xda\xe1\x02\x83\x23\xcf\x47\x36\x0e\x11\xce\xf1\x16\x11\x94\x41\x92\xec\x6b\x8a\x8f\x21\x39\x75\x98\x5e\x4d\x99\x21\x72\xd1\x51\xd8\x13\x93\x24\x5d\x89\x1f\x0f\x75\xb2\xa7\xd5\x80\x16\x43\xa8\x3d\xad\x30\x37\xc6\xd2\x3d\x93\x7c\x45\xae\x8e\xb9\x46\x0f\x67\xfd\x7a\x84\x46\xfd\x73\xce\x40\xbd\x97\x78\x7d\x84\x33\xf2\xc2\x14\x06\xd2\xbd\xc1\xef\xf1\xfd\x67\x84\x91\xce\x83\x6d\x71\x66\x4b\x91\xc7\xa1\xa6\x77\xdf\x9e\xdc\xf9\xb8\x4c\xec\xab\x81\xbb\x09\xe4\x80\xbb\x1c\x14\x05\xd1\x36\x6f\xc5\x49\x6f\x36\xf5\x71\x43\x97\xcd\xb8\xf8\xff\x08\x8c\x96\x5f\xc6\xfe\x07\x0d\xca\xe4\x51\xca\x58\x7a\x3c\x70\x8c\x3f\xa7\x99\xe2\xc4\x66\x2c\xfc\x52\xdc\xcd\xb6\x2c\x35\xf8\xbc\xff\x88\xbe\xc1\xd2\xea\x9b\x5a\x3a\xb4\x64\x48\x9f\xcf\xea\x9d\xa8\xc1\x7a\xad\xac\xe2\xe4\x85\x1f\x2a\x1f\x57\xb9\xa6\xc1\xa4\xd1\x03\x2b\xb2\x49\xce\x49\xf1\x26\xa5\x3f\x01\x00\x00\xff\xff\xb9\xc8\x82\x07\xf8\x07\x00\x00")

func configurdChartsMongodbTemplatesDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbTemplatesDeploymentYaml,
		"configurd/charts/mongodb/templates/deployment.yaml",
	)
}

func configurdChartsMongodbTemplatesDeploymentYaml() (*asset, error) {
	bytes, err := configurdChartsMongodbTemplatesDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/templates/deployment.yaml", size: 2040, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbTemplatesPvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x6a\xf3\x30\x10\xc4\xef\x7e\x8a\x25\x77\x2b\x7c\xf0\x9d\x7c\xed\xb9\x21\xa4\x10\xe8\x71\x23\x6f\x63\x11\xfd\x43\xbb\x76\x49\x5d\xbd\x7b\x51\x15\xda\x24\xd4\xb9\x49\xcb\x6f\x66\x76\x16\xa3\xd9\x53\x62\x13\x7c\x07\xd3\xbf\xe6\x64\x7c\xdf\xc1\xb6\x4c\x58\xc8\xcb\x3e\xd8\xd1\x51\xe3\x48\xb0\x47\xc1\xae\x01\xf0\xe8\xa8\x83\xd5\x3c\x83\xda\x91\x25\x64\x52\x1b\x74\x04\x39\xb7\x71\x5a\x35\x00\x16\x0f\x64\xb9\xa0\x00\x18\xa3\x3a\x8d\x07\x4a\x9e\x84\x58\x99\xb0\xae\xf2\x3f\xd4\x0b\x7c\xc4\x24\x6d\x78\xab\x92\x3d\xda\x91\x58\x1d\x53\x18\xe3\xb2\xc4\xa1\xc7\x23\xf5\xed\xe1\x7c\x1b\xf4\x42\x69\x32\xfa\x27\x6b\x20\xeb\x14\x0f\x6b\x3d\x60\x92\x85\x46\xd7\xb3\x1d\x4d\xa6\x1c\x0a\x72\x5e\x35\x1c\x49\x97\x8a\x2c\x21\xe1\x91\x9e\x2c\x32\x6f\xbe\xab\x39\xf4\x23\xda\x06\x40\x63\x44\x6d\xe4\x5c\x2f\x71\x01\x6f\x7a\xc4\xbb\x3b\x2b\x36\x1f\x97\xf5\xe6\xb9\x85\x77\x23\xc3\x32\x8b\x5a\x13\xf3\x73\xe8\x89\xab\xe4\x6a\x50\x23\x8b\x87\x84\x57\x74\x16\x14\x7c\x82\x37\xbe\x27\x2f\xf0\xff\x37\x81\x7c\x5f\x3f\xf7\xee\x3b\xd2\x16\x8d\xdb\x06\x6b\xf4\xf9\xf1\xce\x37\x68\x75\x1b\x02\xcb\x16\x65\xa8\x6b\xc4\xf2\x7a\x68\x51\x08\xc8\xf9\x2b\x00\x00\xff\xff\xfa\x56\x65\xfa\x8c\x02\x00\x00")

func configurdChartsMongodbTemplatesPvYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbTemplatesPvYaml,
		"configurd/charts/mongodb/templates/pv.yaml",
	)
}

func configurdChartsMongodbTemplatesPvYaml() (*asset, error) {
	bytes, err := configurdChartsMongodbTemplatesPvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/templates/pv.yaml", size: 652, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbTemplatesPvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4e\xf3\x30\x10\xc4\xef\x79\x8a\x55\xef\x71\xf5\x49\xdf\x29\x57\xce\x54\xa8\x48\x95\x38\x6e\x9d\xa1\xb1\xea\x7f\x78\xed\x20\x08\x79\x77\xe4\x06\xaa\x16\xe8\x71\xd7\x33\xde\x99\x1f\x47\xb3\x43\x12\x13\x7c\x47\xe3\xbf\xe6\x68\x7c\xdf\xd1\x43\xdd\x48\x86\xcf\xbb\x60\x8b\xc3\x9d\x65\xe3\x1a\x87\xcc\x3d\x67\xee\x1a\x22\xcf\x0e\x1d\xad\xa6\x89\xd4\x16\x16\x2c\x50\x1b\x76\xa0\x79\x6e\xe3\xa8\x57\x0d\x91\xe5\x3d\xac\x54\x2d\x11\xc7\xa8\x8e\x65\x8f\xe4\x91\x21\xca\x84\xf5\xe2\xff\xc3\x7e\x43\x1f\x39\xe5\x36\x3c\x2f\x96\x1d\xdb\x02\x51\x87\x14\x4a\xbc\x6d\x71\xec\xf9\x80\xbe\xdd\xbf\x5d\x1f\x7a\x44\x1a\x8d\x3e\xdf\x1a\x60\x9d\x92\x61\xad\x07\x4e\xf9\x46\xa5\xcb\xdd\x16\xa3\xa9\xb8\x68\x9e\x57\x8d\x44\xe8\x5a\x51\x72\x48\x7c\xa8\x9c\x44\x36\xa7\x6a\x8e\x7d\x61\xdb\x10\x4d\x53\x4b\xaf\x26\x0f\xe7\xd8\xf1\x07\x5c\xc5\x5a\x43\xe4\x3e\xf4\x90\x25\xd4\xc5\x62\xe1\x57\xff\xc8\xe1\x89\x9d\x25\x45\x1f\xe4\x8d\xef\xe1\x33\xfd\x5f\xe4\xf5\x15\xbe\x5f\x86\x04\x09\x25\xe9\x6f\x67\xc2\x4b\x81\xe4\xaf\xe9\x1c\xf4\x8a\xe3\xaf\x40\x62\xde\x4f\x78\x3e\x03\x00\x00\xff\xff\xa0\x91\xbb\xc9\x1c\x02\x00\x00")

func configurdChartsMongodbTemplatesPvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbTemplatesPvcYaml,
		"configurd/charts/mongodb/templates/pvc.yaml",
	)
}

func configurdChartsMongodbTemplatesPvcYaml() (*asset, error) {
	bytes, err := configurdChartsMongodbTemplatesPvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/templates/pvc.yaml", size: 540, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbTemplatesServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x4d\x6a\xc3\x30\x10\x46\xf7\x3e\xc5\x90\xbd\x15\xba\xd5\x21\x4a\x49\x21\xfb\xb1\xfc\x35\x16\xd1\x1f\xa3\xb1\x21\x04\xdd\xbd\xb8\x4e\xa1\x01\xb7\x8b\x2e\x25\xbd\x87\xe6\x0d\x17\x7f\x86\x54\x9f\x93\xa5\xe5\xa5\xbb\xfa\x34\x5a\x7a\x87\x2c\xde\xa1\x8b\x50\x1e\x59\xd9\x76\x44\x89\x23\x2c\xdd\xef\x64\x4e\x08\xe0\x0a\xf3\xca\x11\xd4\x5a\x47\x14\x78\x40\xa8\x2b\x45\xc4\xa5\x98\xeb\x3c\x40\x12\x14\xd5\xf8\x7c\xfc\xcb\xdc\xe3\x0b\x8b\xf6\xf9\x63\x53\xce\x1c\x66\x54\x73\x91\x3c\x97\xdf\x95\xc8\x89\x2f\x18\xfb\xe1\xf6\xfc\xd1\x23\xe4\x5b\x9c\x10\xa2\xa9\xd3\xd1\x4d\x2c\x6a\xe9\xb0\x33\x53\xff\xf3\xee\x84\xc5\xaf\xab\xa1\xd6\x0e\x5d\x2d\x70\x6b\x62\x45\x80\xd3\x2c\xff\xc9\xd5\x5b\xc1\x53\x57\xdd\x06\x34\xeb\xc3\x86\x94\x2c\xfa\x58\x65\xff\x75\xd8\xe5\x5d\x4e\xca\x3e\x41\xde\xb2\x28\xb5\xf6\x19\x00\x00\xff\xff\xc8\x45\x56\x21\xc7\x01\x00\x00")

func configurdChartsMongodbTemplatesServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbTemplatesServiceYaml,
		"configurd/charts/mongodb/templates/service.yaml",
	)
}

func configurdChartsMongodbTemplatesServiceYaml() (*asset, error) {
	bytes, err := configurdChartsMongodbTemplatesServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/templates/service.yaml", size: 455, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbTemplatesTestsTestConnectionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x91\x4b\x4f\x71\xd9\xd5\x0f\x51\xca\x06\xbd\x94\x1d\x14\x47\x4b\x4c\x6d\x39\x58\x4a\xd7\x52\xf2\xee\xc3\x69\xc6\x36\xd6\xb1\xeb\x2f\x7d\xbf\xf4\x4b\x38\xfa\x03\x65\xf1\x89\x2d\x9c\x9f\xaa\x93\xe7\xce\xc2\x3e\x75\x55\x24\xc5\x0e\x15\x6d\x05\xc0\x18\xc9\x42\x7d\xbb\x81\x67\x17\xa6\x8e\xa0\xa6\x0b\xc6\x31\x90\x79\x9b\x42\x28\xe5\x1a\x0c\xcc\x73\xa3\x24\xda\xb8\xc4\x4c\x4e\x7d\xe2\xba\x02\x08\xd8\x52\x90\x62\x03\x80\xe3\x68\x4e\x53\x4b\x99\x49\x49\x8c\x4f\xdb\xbb\xf5\x23\xe7\x2f\xd7\x05\x1d\x28\x44\x23\xc3\xd6\x0d\x98\xf5\x31\xb1\x94\xbe\x21\xbf\xa7\x79\x16\x45\x76\xf7\x89\xe6\x99\x02\xa1\x90\xd9\x61\xa4\xbf\x99\x88\x8c\x3d\x75\x4d\x7b\xfd\x49\xbd\x50\x3e\x7b\xb7\x82\xc8\x9c\x14\x4b\xe4\x35\x69\xfd\xb9\xef\x90\xd2\xa9\xb6\xb0\x1c\x46\x26\xe7\x48\xa4\x92\x91\x5c\x69\x73\x89\x15\x3d\x53\x5e\xa1\x66\xbd\xf4\x7b\x4f\xba\x08\x00\x3e\x62\x4f\x16\xda\x49\xae\x6d\xba\xac\xa2\x4b\x31\x62\x79\xd4\x71\x53\x5a\x37\xaf\xab\x8e\xb9\x17\x0b\x70\xdc\xfc\xff\x29\x5b\xa2\x1c\x30\x4c\x24\x46\xee\x49\xcc\x98\xb2\xc2\x3c\x2f\x76\x99\x44\x31\xeb\x3e\x05\xef\xae\x16\x76\x74\xa6\x5c\x7d\x04\x00\x00\xff\xff\xc5\xf1\x40\xab\x2d\x02\x00\x00")

func configurdChartsMongodbTemplatesTestsTestConnectionYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbTemplatesTestsTestConnectionYaml,
		"configurd/charts/mongodb/templates/tests/test-connection.yaml",
	)
}

func configurdChartsMongodbTemplatesTestsTestConnectionYaml() (*asset, error) {
	bytes, err := configurdChartsMongodbTemplatesTestsTestConnectionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/templates/tests/test-connection.yaml", size: 557, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdChartsMongodbValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x6f\xdc\xb6\x13\xbd\xf3\x53\x0c\xd6\x87\x5c\xec\xb5\xd7\x97\xfc\x20\x20\x07\x23\xfe\x35\x08\xe0\x7f\x88\xdd\x06\x45\x90\xc3\x2c\x35\x5a\x4d\x4b\x71\x54\xce\x70\x1d\xb5\xe8\x77\x2f\x48\x69\x6d\x37\xce\xa1\x27\x51\xd2\xe3\xf0\xcd\xe3\x7b\x73\x04\x97\xd4\x61\x0e\x06\x7b\x0c\x99\x14\x3a\x49\x60\xa4\xb6\x76\x47\xf0\xd0\xb3\x02\x2b\x20\xfc\x7a\x71\x7d\x75\xd2\x49\x1a\xd0\x8c\x5a\xe8\x38\x50\x01\x5c\x92\x0f\x98\x08\xf6\x98\x18\xb7\x81\x14\x4c\x60\x4b\x30\xa2\x2a\xb5\xc0\xd1\x04\x26\xc9\xa5\xe2\x30\x06\x34\xd2\xb5\x73\x89\xc6\xc0\x1e\xdf\x4b\x8e\xd6\xc0\xc6\x39\x1e\x70\x47\x8d\x03\x48\x34\x8a\xb2\x49\x9a\x1a\x88\x3b\x8e\xdf\x1c\x80\xe1\xae\x81\xba\xd5\x1c\xc0\x98\x43\xb8\x93\xc0\x7e\x6a\xe0\x63\x77\x23\x76\x97\x48\x29\xda\x52\xe4\x2e\x87\x70\x4f\x3e\x91\x69\x03\x5f\xbe\xba\x88\x03\xdd\xee\x29\x25\x6e\xa9\x81\xd5\xca\x75\x39\x84\x57\x1f\x9d\x52\xda\xb3\xa7\x0b\xef\x2b\x27\x07\x70\x04\xf7\x23\x79\xee\x98\x14\x1e\x7b\xb2\x9e\x12\x20\x2c\x38\xc0\x19\x08\xda\x4b\x0e\x6d\x69\xd8\x27\x42\xa3\xd6\xc1\xb2\x6a\xc0\x52\xa6\x5a\xe8\x22\x46\x31\x34\x96\x58\xd5\xc1\xb6\x2d\x0f\xeb\xe9\xfb\x72\x0e\x00\x9f\xb1\x0d\xfc\xf5\x77\xdd\xff\xd0\x13\x14\xca\x20\xdd\x8f\x76\x95\x62\x59\x69\x5d\xb1\x1f\x3b\x88\x62\xa0\x64\x80\xb1\x5d\xb8\x94\x1b\x2c\x6c\x8e\x01\xe7\x42\xac\xb0\xa3\x48\xa9\x30\x86\xac\x1c\x77\xb5\xf0\x41\x9b\xa7\xcb\x72\x50\xf1\x8d\x73\xa3\xb4\xf7\xe4\x73\x62\x9b\xde\x4b\x34\xfa\x66\x4f\xf4\x3a\xfd\x90\x24\x8f\x0d\x9c\x9f\x9d\x9d\x15\x29\x7f\x0c\xf3\x38\xe2\x96\x03\x1b\x93\xce\x02\x03\xb4\x49\xc6\xc3\xfa\x04\x2e\xae\xae\xea\x3a\x11\xb6\xb7\x31\x4c\x9f\x44\xec\x27\x0e\xa4\x93\x1a\x0d\x2f\x04\x4d\x39\x5e\xe8\x8d\xc4\x02\xf8\xfe\xf3\xcf\x4a\xa9\x81\xcd\x42\xa5\x0a\x55\x4e\xb0\x69\xa4\x06\x6e\xa4\xa5\x3b\x49\x45\x68\x2f\xd1\x90\x23\xa5\xf2\xde\xc0\xf9\xdb\xb3\xcd\x5b\xe7\x76\x73\x27\xd5\x6b\x8e\xe2\xbe\x7a\xa8\xd4\x3e\x99\x85\x80\x87\xff\xdf\x3f\x2c\x84\x6b\x5c\x1a\x58\x15\xf0\xca\x39\x4c\x3b\x7d\x01\x5f\x61\xda\x6d\xde\xbd\x93\x48\x2b\xe7\x46\x4a\xca\x6a\x14\xed\x17\x09\x79\xa8\x8c\x94\xff\xa4\x06\x36\x1f\xb8\x98\x1a\xad\x6f\xe0\xd4\x86\xb1\x66\xc0\x07\xe4\xe1\x60\xf2\x4b\x0a\x54\x6f\x02\xbd\x27\xd5\x6b\x69\x67\xfd\x8a\x62\x9f\x08\xdb\xcf\x89\x8d\x6e\xa3\x27\xe7\xf6\xb5\xf8\x75\x31\x45\x85\x1c\x48\xb7\x68\x58\x77\x2c\xe7\x94\xf7\xd3\x76\xeb\x1c\xc7\x5d\x22\xad\xd8\xd7\xc6\x2b\x7d\xfc\x9e\xb7\x94\x22\x95\xd8\xb2\x9c\x2e\xf0\xb5\x0f\xa8\xfa\x1c\xd0\xd7\x40\x0b\x7a\x82\x7e\xa8\xea\xa4\x4c\x2b\x07\xd0\x8b\x5a\xcd\xda\x81\x45\x5d\x6a\x8d\xea\x4d\x65\x59\x72\x98\x48\x25\x27\x4f\xcf\xe6\xff\x4c\x90\x35\x63\x08\x53\x11\x46\x86\x81\x62\x5b\x2d\x6e\x02\x5a\x13\x3a\x41\xbb\x0c\xb0\xa7\xdd\xd5\xfb\x26\x10\x08\xf7\x04\x56\x86\x18\x96\x21\xe6\x25\xaa\x67\xc9\x3a\x3b\xb2\x97\x12\xa3\x3a\xef\xfa\x72\x0c\xa5\xf5\x3c\xf1\x30\xa8\x00\xc7\x92\x1e\x25\x05\xdf\x63\xf4\xf3\x33\x99\x16\x9f\x81\x44\xa0\xb8\xe7\x24\x71\xa0\x68\x0a\x8f\x6c\x3d\x04\x36\x0b\x8b\x17\x0f\x54\x8e\x41\xb3\xef\xcb\xf1\xd7\x1c\xb9\xc8\xb4\x2e\x21\x9d\x24\x43\x2b\xf0\x88\xf1\x5f\x9d\xbc\xd8\x96\xe3\xdc\xad\xcd\xd1\x94\x10\xe4\x91\xe3\xae\x56\x0f\x1c\x0b\x04\xdb\xdf\xb2\xd6\xff\x43\x39\x20\x52\x31\x08\xa6\xe9\xb8\xf6\x9f\x68\x90\xda\x3d\x81\xcf\x29\x4c\xb0\x4d\x58\xb5\xe9\x8c\x12\xbc\x79\x96\xfa\xcd\x7a\x29\x3a\xb0\x3d\x45\xd3\x8f\xb9\xc6\x68\x58\xde\x07\x1a\xea\x54\xde\x9c\xff\xef\x9a\x97\x16\xff\xc8\xa4\xff\x75\x87\x8b\xd2\xd2\x3d\x05\xf2\x26\xa9\xde\xae\x33\x09\x65\x04\xcd\x96\xfb\xf2\xd5\x39\xec\x3a\x8e\x6c\x53\xfd\xfd\x4f\x00\x00\x00\xff\xff\x54\x08\x92\x59\x98\x06\x00\x00")

func configurdChartsMongodbValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configurdChartsMongodbValuesYaml,
		"configurd/charts/mongodb/values.yaml",
	)
}

func configurdChartsMongodbValuesYaml() (*asset, error) {
	bytes, err := configurdChartsMongodbValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/charts/mongodb/values.yaml", size: 1688, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdNamespacesLocalHelloGroupYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x8f\x41\x0e\xc2\x20\x14\x44\xf7\x3d\xc5\xa4\x7b\x52\x97\x86\xc4\x3b\x78\x05\xac\x3f\xf0\x0d\xe1\x93\x0f\xf6\xfc\x06\x6b\x0d\x76\xe1\xc6\xc4\x59\x0d\x33\x04\xe6\x79\x95\x7b\xb6\x03\x50\x48\x17\x9e\xa9\x34\x0f\x04\x8a\x51\xcc\x2b\x5b\x23\x40\x16\x52\xe5\xeb\x76\xa7\xc9\xa9\xef\x4e\x80\xc1\x68\x8c\x57\xa2\xca\xc9\x9f\x02\x05\x1a\xdf\xed\xee\xb5\xa6\x59\x52\x75\x9c\x48\xcf\xa2\xd5\xe2\x78\xe8\xba\xbc\x8f\x38\x79\xa5\xf2\xf1\x5d\x76\x35\x58\x4c\xdb\xf6\xe9\x39\xbb\xeb\x83\x94\x6a\x11\x65\x76\xb1\xd9\x15\x8d\x7f\xe7\x72\xfc\x5f\x2c\xfe\xc2\x74\x93\x4b\xb1\xc3\x23\x00\x00\xff\xff\x5f\x4b\x8c\x2d\xc8\x01\x00\x00")

func configurdNamespacesLocalHelloGroupYmlBytes() ([]byte, error) {
	return bindataRead(
		_configurdNamespacesLocalHelloGroupYml,
		"configurd/namespaces/local/hello-group.yml",
	)
}

func configurdNamespacesLocalHelloGroupYml() (*asset, error) {
	bytes, err := configurdNamespacesLocalHelloGroupYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/namespaces/local/hello-group.yml", size: 456, mode: os.FileMode(420), modTime: time.Unix(1587555998, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdNamespacesLocalMongodbGroupYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xb1\xca\xc2\x40\x10\x04\xe0\xfe\x7f\x8a\x79\x81\xf0\x63\x7b\xb5\x60\x25\x8a\x85\xd6\xe7\xdd\x10\x17\x2e\xd9\xb0\x7b\x09\xe8\xd3\x4b\x50\xf1\x9c\x6a\xf9\x66\x61\x7a\xd3\x79\x0a\x7f\x80\xd3\x16\x49\xf4\xf5\x06\x06\x1d\x7b\xcd\xd7\xee\xad\x2f\x04\x74\xa1\x99\xe4\xcf\xd7\x9a\x89\xe6\xe2\x95\x63\x3d\x6b\x99\x07\x7e\x1b\xc0\xe5\xc1\x80\xcd\x4e\x1a\x9b\x62\xbd\x05\xfc\xe7\x58\x63\xa3\xc6\x54\xa2\x0c\x47\x2d\x92\xee\x01\x5b\x16\x56\x36\x7d\x4c\x89\xee\x7b\xfd\x99\x5e\xd3\xe1\xc4\x98\x2f\x26\x95\x87\x31\xf1\x19\x00\x00\xff\xff\xc8\x43\x40\x51\xcf\x00\x00\x00")

func configurdNamespacesLocalMongodbGroupYmlBytes() ([]byte, error) {
	return bindataRead(
		_configurdNamespacesLocalMongodbGroupYml,
		"configurd/namespaces/local/mongodb-group.yml",
	)
}

func configurdNamespacesLocalMongodbGroupYml() (*asset, error) {
	bytes, err := configurdNamespacesLocalMongodbGroupYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/namespaces/local/mongodb-group.yml", size: 207, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdServicesHelloServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x41\x0e\xc2\x30\x0c\x44\xd1\x7d\x4e\x31\xea\x1e\x75\x9f\xdb\x18\xc7\x6d\x2d\xec\x4c\x14\x5a\xc4\xf1\x11\xb0\xfb\xd2\x7f\x4f\x9b\x2f\x57\xab\x05\xb8\x5f\x1e\xed\x1b\x80\x32\x53\x7a\xab\x58\x1a\xf5\x61\xf3\xff\x20\x63\x84\xab\x9c\xce\xbe\x2e\x3f\xe8\x29\xbb\x55\x6c\x64\x72\x55\xf6\xcd\xf7\x6b\xb6\xdb\x61\x11\x2c\x80\x1e\x32\xcf\x0a\x7b\x4b\x8e\xb0\xf2\x09\x00\x00\xff\xff\xbb\xf1\x04\xaf\x6d\x00\x00\x00")

func configurdServicesHelloServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_configurdServicesHelloServiceYml,
		"configurd/services/hello-service.yml",
	)
}

func configurdServicesHelloServiceYml() (*asset, error) {
	bytes, err := configurdServicesHelloServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/services/hello-service.yml", size: 109, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdServicesHiServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x41\x0e\xc2\x40\x08\x46\xe1\xfd\x9c\xe2\x4f\xf7\xa6\x7b\x6e\x83\x40\x5b\xe2\x30\x4c\xb0\x35\x1e\xdf\xa8\xbb\x97\xbc\xef\x69\xf5\x72\x31\x6a\xc0\xfd\xf2\xae\xdf\x00\x24\x23\x78\x28\x61\xd1\x94\x87\xd5\xff\x81\xe7\xec\x2e\x7c\x7a\x8e\x75\xf9\x41\x0f\xde\x8d\xb0\x65\x46\xae\x92\x63\xf3\xfd\x2a\xbd\x1d\xde\x00\x39\xb8\x4e\x82\xbd\x39\x66\xb7\xf6\x09\x00\x00\xff\xff\xa5\xdd\x58\x06\x6a\x00\x00\x00")

func configurdServicesHiServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_configurdServicesHiServiceYml,
		"configurd/services/hi-service.yml",
	)
}

func configurdServicesHiServiceYml() (*asset, error) {
	bytes, err := configurdServicesHiServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/services/hi-service.yml", size: 106, mode: os.FileMode(420), modTime: time.Unix(1587476628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configurdServicesMongodbServiceYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\xcb\x4c\x4e\xb5\xe2\x52\x50\x48\x2a\xcd\xcc\x49\x01\x31\x14\x14\x32\x73\x13\xd3\x53\xad\x14\x72\xf3\xf3\xd2\xf3\xb9\x14\x14\x92\x33\x12\x8b\x4a\xa0\xdc\x94\x24\x2e\x40\x00\x00\x00\xff\xff\x28\x87\x60\xa7\x34\x00\x00\x00")

func configurdServicesMongodbServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_configurdServicesMongodbServiceYml,
		"configurd/services/mongodb-service.yml",
	)
}

func configurdServicesMongodbServiceYml() (*asset, error) {
	bytes, err := configurdServicesMongodbServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configurd/services/mongodb-service.yml", size: 52, mode: os.FileMode(420), modTime: time.Unix(1587555761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"application/Dockerfile":                                        applicationDockerfile,
	"application/hello.go":                                          applicationHelloGo,
	"configurd/.gitignore":                                          configurdGitignore,
	"configurd/charts/example/.helmignore":                          configurdChartsExampleHelmignore,
	"configurd/charts/example/Chart.yaml":                           configurdChartsExampleChartYaml,
	"configurd/charts/example/templates/_helpers.tpl":               configurdChartsExampleTemplates_helpersTpl,
	"configurd/charts/example/templates/deployment.yaml":            configurdChartsExampleTemplatesDeploymentYaml,
	"configurd/charts/example/templates/ingress.yaml":               configurdChartsExampleTemplatesIngressYaml,
	"configurd/charts/example/templates/service.yaml":               configurdChartsExampleTemplatesServiceYaml,
	"configurd/charts/example/templates/tests/test-connection.yaml": configurdChartsExampleTemplatesTestsTestConnectionYaml,
	"configurd/charts/example/values.yaml":                          configurdChartsExampleValuesYaml,
	"configurd/charts/mongodb/.helmignore":                          configurdChartsMongodbHelmignore,
	"configurd/charts/mongodb/Chart.yaml":                           configurdChartsMongodbChartYaml,
	"configurd/charts/mongodb/templates/_helpers.tpl":               configurdChartsMongodbTemplates_helpersTpl,
	"configurd/charts/mongodb/templates/deployment.yaml":            configurdChartsMongodbTemplatesDeploymentYaml,
	"configurd/charts/mongodb/templates/pv.yaml":                    configurdChartsMongodbTemplatesPvYaml,
	"configurd/charts/mongodb/templates/pvc.yaml":                   configurdChartsMongodbTemplatesPvcYaml,
	"configurd/charts/mongodb/templates/service.yaml":               configurdChartsMongodbTemplatesServiceYaml,
	"configurd/charts/mongodb/templates/tests/test-connection.yaml": configurdChartsMongodbTemplatesTestsTestConnectionYaml,
	"configurd/charts/mongodb/values.yaml":                          configurdChartsMongodbValuesYaml,
	"configurd/namespaces/local/hello-group.yml":                    configurdNamespacesLocalHelloGroupYml,
	"configurd/namespaces/local/mongodb-group.yml":                  configurdNamespacesLocalMongodbGroupYml,
	"configurd/services/hello-service.yml":                          configurdServicesHelloServiceYml,
	"configurd/services/hi-service.yml":                             configurdServicesHiServiceYml,
	"configurd/services/mongodb-service.yml":                        configurdServicesMongodbServiceYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"application": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{applicationDockerfile, map[string]*bintree{}},
		"hello.go":   &bintree{applicationHelloGo, map[string]*bintree{}},
	}},
	"configurd": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{configurdGitignore, map[string]*bintree{}},
		"charts": &bintree{nil, map[string]*bintree{
			"example": &bintree{nil, map[string]*bintree{
				".helmignore": &bintree{configurdChartsExampleHelmignore, map[string]*bintree{}},
				"Chart.yaml":  &bintree{configurdChartsExampleChartYaml, map[string]*bintree{}},
				"templates": &bintree{nil, map[string]*bintree{
					"_helpers.tpl":    &bintree{configurdChartsExampleTemplates_helpersTpl, map[string]*bintree{}},
					"deployment.yaml": &bintree{configurdChartsExampleTemplatesDeploymentYaml, map[string]*bintree{}},
					"ingress.yaml":    &bintree{configurdChartsExampleTemplatesIngressYaml, map[string]*bintree{}},
					"service.yaml":    &bintree{configurdChartsExampleTemplatesServiceYaml, map[string]*bintree{}},
					"tests": &bintree{nil, map[string]*bintree{
						"test-connection.yaml": &bintree{configurdChartsExampleTemplatesTestsTestConnectionYaml, map[string]*bintree{}},
					}},
				}},
				"values.yaml": &bintree{configurdChartsExampleValuesYaml, map[string]*bintree{}},
			}},
			"mongodb": &bintree{nil, map[string]*bintree{
				".helmignore": &bintree{configurdChartsMongodbHelmignore, map[string]*bintree{}},
				"Chart.yaml":  &bintree{configurdChartsMongodbChartYaml, map[string]*bintree{}},
				"templates": &bintree{nil, map[string]*bintree{
					"_helpers.tpl":    &bintree{configurdChartsMongodbTemplates_helpersTpl, map[string]*bintree{}},
					"deployment.yaml": &bintree{configurdChartsMongodbTemplatesDeploymentYaml, map[string]*bintree{}},
					"pv.yaml":         &bintree{configurdChartsMongodbTemplatesPvYaml, map[string]*bintree{}},
					"pvc.yaml":        &bintree{configurdChartsMongodbTemplatesPvcYaml, map[string]*bintree{}},
					"service.yaml":    &bintree{configurdChartsMongodbTemplatesServiceYaml, map[string]*bintree{}},
					"tests": &bintree{nil, map[string]*bintree{
						"test-connection.yaml": &bintree{configurdChartsMongodbTemplatesTestsTestConnectionYaml, map[string]*bintree{}},
					}},
				}},
				"values.yaml": &bintree{configurdChartsMongodbValuesYaml, map[string]*bintree{}},
			}},
		}},
		"namespaces": &bintree{nil, map[string]*bintree{
			"local": &bintree{nil, map[string]*bintree{
				"hello-group.yml":   &bintree{configurdNamespacesLocalHelloGroupYml, map[string]*bintree{}},
				"mongodb-group.yml": &bintree{configurdNamespacesLocalMongodbGroupYml, map[string]*bintree{}},
			}},
		}},
		"services": &bintree{nil, map[string]*bintree{
			"hello-service.yml":   &bintree{configurdServicesHelloServiceYml, map[string]*bintree{}},
			"hi-service.yml":      &bintree{configurdServicesHiServiceYml, map[string]*bintree{}},
			"mongodb-service.yml": &bintree{configurdServicesMongodbServiceYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
